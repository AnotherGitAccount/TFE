// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.0 211

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire [31:0]  ram_access_0_altera_axi4_master_awaddr,                             //                              ram_access_0_altera_axi4_master.awaddr
		input  wire [3:0]   ram_access_0_altera_axi4_master_awcache,                            //                                                             .awcache
		input  wire [2:0]   ram_access_0_altera_axi4_master_awprot,                             //                                                             .awprot
		input  wire [0:0]   ram_access_0_altera_axi4_master_awuser,                             //                                                             .awuser
		input  wire         ram_access_0_altera_axi4_master_awvalid,                            //                                                             .awvalid
		output wire         ram_access_0_altera_axi4_master_awready,                            //                                                             .awready
		input  wire [63:0]  ram_access_0_altera_axi4_master_wdata,                              //                                                             .wdata
		input  wire         ram_access_0_altera_axi4_master_wlast,                              //                                                             .wlast
		input  wire         ram_access_0_altera_axi4_master_wvalid,                             //                                                             .wvalid
		output wire         ram_access_0_altera_axi4_master_wready,                             //                                                             .wready
		output wire         ram_access_0_altera_axi4_master_bvalid,                             //                                                             .bvalid
		input  wire         ram_access_0_altera_axi4_master_bready,                             //                                                             .bready
		input  wire [31:0]  ram_access_0_altera_axi4_master_araddr,                             //                                                             .araddr
		input  wire [3:0]   ram_access_0_altera_axi4_master_arcache,                            //                                                             .arcache
		input  wire [2:0]   ram_access_0_altera_axi4_master_arprot,                             //                                                             .arprot
		input  wire [0:0]   ram_access_0_altera_axi4_master_aruser,                             //                                                             .aruser
		input  wire         ram_access_0_altera_axi4_master_arvalid,                            //                                                             .arvalid
		output wire         ram_access_0_altera_axi4_master_arready,                            //                                                             .arready
		output wire [63:0]  ram_access_0_altera_axi4_master_rdata,                              //                                                             .rdata
		output wire         ram_access_0_altera_axi4_master_rvalid,                             //                                                             .rvalid
		input  wire         ram_access_0_altera_axi4_master_rready,                             //                                                             .rready
		input  wire         clk_0_clk_clk,                                                      //                                                    clk_0_clk.clk
		input  wire         f2sdram_only_master_clk_reset_reset_bridge_in_reset_reset,          //          f2sdram_only_master_clk_reset_reset_bridge_in_reset.reset
		input  wire         hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset, // hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset.reset
		input  wire         ram_access_0_reset_reset_bridge_in_reset_reset,                     //                     ram_access_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0]  f2sdram_only_master_master_address,                                 //                                   f2sdram_only_master_master.address
		output wire         f2sdram_only_master_master_waitrequest,                             //                                                             .waitrequest
		input  wire [3:0]   f2sdram_only_master_master_byteenable,                              //                                                             .byteenable
		input  wire         f2sdram_only_master_master_read,                                    //                                                             .read
		output wire [31:0]  f2sdram_only_master_master_readdata,                                //                                                             .readdata
		output wire         f2sdram_only_master_master_readdatavalid,                           //                                                             .readdatavalid
		input  wire         f2sdram_only_master_master_write,                                   //                                                             .write
		input  wire [31:0]  f2sdram_only_master_master_writedata,                               //                                                             .writedata
		output wire [26:0]  hps_0_f2h_sdram0_data_address,                                      //                                        hps_0_f2h_sdram0_data.address
		output wire         hps_0_f2h_sdram0_data_write,                                        //                                                             .write
		output wire         hps_0_f2h_sdram0_data_read,                                         //                                                             .read
		input  wire [255:0] hps_0_f2h_sdram0_data_readdata,                                     //                                                             .readdata
		output wire [255:0] hps_0_f2h_sdram0_data_writedata,                                    //                                                             .writedata
		output wire [7:0]   hps_0_f2h_sdram0_data_burstcount,                                   //                                                             .burstcount
		output wire [31:0]  hps_0_f2h_sdram0_data_byteenable,                                   //                                                             .byteenable
		input  wire         hps_0_f2h_sdram0_data_readdatavalid,                                //                                                             .readdatavalid
		input  wire         hps_0_f2h_sdram0_data_waitrequest                                   //                                                             .waitrequest
	);

	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_ruser;                           // ram_access_0_altera_axi4_master_agent:ruser -> ram_access_0_altera_axi4_master_translator:m0_ruser
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_wuser;                           // ram_access_0_altera_axi4_master_translator:m0_wuser -> ram_access_0_altera_axi4_master_agent:wuser
	wire    [1:0] ram_access_0_altera_axi4_master_translator_m0_awburst;                         // ram_access_0_altera_axi4_master_translator:m0_awburst -> ram_access_0_altera_axi4_master_agent:awburst
	wire    [3:0] ram_access_0_altera_axi4_master_translator_m0_arregion;                        // ram_access_0_altera_axi4_master_translator:m0_arregion -> ram_access_0_altera_axi4_master_agent:arregion
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_awuser;                          // ram_access_0_altera_axi4_master_translator:m0_awuser -> ram_access_0_altera_axi4_master_agent:awuser
	wire    [7:0] ram_access_0_altera_axi4_master_translator_m0_arlen;                           // ram_access_0_altera_axi4_master_translator:m0_arlen -> ram_access_0_altera_axi4_master_agent:arlen
	wire    [3:0] ram_access_0_altera_axi4_master_translator_m0_arqos;                           // ram_access_0_altera_axi4_master_translator:m0_arqos -> ram_access_0_altera_axi4_master_agent:arqos
	wire    [7:0] ram_access_0_altera_axi4_master_translator_m0_wstrb;                           // ram_access_0_altera_axi4_master_translator:m0_wstrb -> ram_access_0_altera_axi4_master_agent:wstrb
	wire          ram_access_0_altera_axi4_master_translator_m0_wready;                          // ram_access_0_altera_axi4_master_agent:wready -> ram_access_0_altera_axi4_master_translator:m0_wready
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_rid;                             // ram_access_0_altera_axi4_master_agent:rid -> ram_access_0_altera_axi4_master_translator:m0_rid
	wire          ram_access_0_altera_axi4_master_translator_m0_rready;                          // ram_access_0_altera_axi4_master_translator:m0_rready -> ram_access_0_altera_axi4_master_agent:rready
	wire    [7:0] ram_access_0_altera_axi4_master_translator_m0_awlen;                           // ram_access_0_altera_axi4_master_translator:m0_awlen -> ram_access_0_altera_axi4_master_agent:awlen
	wire    [3:0] ram_access_0_altera_axi4_master_translator_m0_awqos;                           // ram_access_0_altera_axi4_master_translator:m0_awqos -> ram_access_0_altera_axi4_master_agent:awqos
	wire    [3:0] ram_access_0_altera_axi4_master_translator_m0_arcache;                         // ram_access_0_altera_axi4_master_translator:m0_arcache -> ram_access_0_altera_axi4_master_agent:arcache
	wire          ram_access_0_altera_axi4_master_translator_m0_wvalid;                          // ram_access_0_altera_axi4_master_translator:m0_wvalid -> ram_access_0_altera_axi4_master_agent:wvalid
	wire   [31:0] ram_access_0_altera_axi4_master_translator_m0_araddr;                          // ram_access_0_altera_axi4_master_translator:m0_araddr -> ram_access_0_altera_axi4_master_agent:araddr
	wire    [2:0] ram_access_0_altera_axi4_master_translator_m0_arprot;                          // ram_access_0_altera_axi4_master_translator:m0_arprot -> ram_access_0_altera_axi4_master_agent:arprot
	wire    [2:0] ram_access_0_altera_axi4_master_translator_m0_awprot;                          // ram_access_0_altera_axi4_master_translator:m0_awprot -> ram_access_0_altera_axi4_master_agent:awprot
	wire   [63:0] ram_access_0_altera_axi4_master_translator_m0_wdata;                           // ram_access_0_altera_axi4_master_translator:m0_wdata -> ram_access_0_altera_axi4_master_agent:wdata
	wire          ram_access_0_altera_axi4_master_translator_m0_arvalid;                         // ram_access_0_altera_axi4_master_translator:m0_arvalid -> ram_access_0_altera_axi4_master_agent:arvalid
	wire    [3:0] ram_access_0_altera_axi4_master_translator_m0_awcache;                         // ram_access_0_altera_axi4_master_translator:m0_awcache -> ram_access_0_altera_axi4_master_agent:awcache
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_arid;                            // ram_access_0_altera_axi4_master_translator:m0_arid -> ram_access_0_altera_axi4_master_agent:arid
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_arlock;                          // ram_access_0_altera_axi4_master_translator:m0_arlock -> ram_access_0_altera_axi4_master_agent:arlock
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_awlock;                          // ram_access_0_altera_axi4_master_translator:m0_awlock -> ram_access_0_altera_axi4_master_agent:awlock
	wire   [31:0] ram_access_0_altera_axi4_master_translator_m0_awaddr;                          // ram_access_0_altera_axi4_master_translator:m0_awaddr -> ram_access_0_altera_axi4_master_agent:awaddr
	wire    [1:0] ram_access_0_altera_axi4_master_translator_m0_bresp;                           // ram_access_0_altera_axi4_master_agent:bresp -> ram_access_0_altera_axi4_master_translator:m0_bresp
	wire          ram_access_0_altera_axi4_master_translator_m0_arready;                         // ram_access_0_altera_axi4_master_agent:arready -> ram_access_0_altera_axi4_master_translator:m0_arready
	wire   [63:0] ram_access_0_altera_axi4_master_translator_m0_rdata;                           // ram_access_0_altera_axi4_master_agent:rdata -> ram_access_0_altera_axi4_master_translator:m0_rdata
	wire          ram_access_0_altera_axi4_master_translator_m0_awready;                         // ram_access_0_altera_axi4_master_agent:awready -> ram_access_0_altera_axi4_master_translator:m0_awready
	wire    [1:0] ram_access_0_altera_axi4_master_translator_m0_arburst;                         // ram_access_0_altera_axi4_master_translator:m0_arburst -> ram_access_0_altera_axi4_master_agent:arburst
	wire    [2:0] ram_access_0_altera_axi4_master_translator_m0_arsize;                          // ram_access_0_altera_axi4_master_translator:m0_arsize -> ram_access_0_altera_axi4_master_agent:arsize
	wire          ram_access_0_altera_axi4_master_translator_m0_bready;                          // ram_access_0_altera_axi4_master_translator:m0_bready -> ram_access_0_altera_axi4_master_agent:bready
	wire          ram_access_0_altera_axi4_master_translator_m0_rlast;                           // ram_access_0_altera_axi4_master_agent:rlast -> ram_access_0_altera_axi4_master_translator:m0_rlast
	wire          ram_access_0_altera_axi4_master_translator_m0_wlast;                           // ram_access_0_altera_axi4_master_translator:m0_wlast -> ram_access_0_altera_axi4_master_agent:wlast
	wire    [3:0] ram_access_0_altera_axi4_master_translator_m0_awregion;                        // ram_access_0_altera_axi4_master_translator:m0_awregion -> ram_access_0_altera_axi4_master_agent:awregion
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_buser;                           // ram_access_0_altera_axi4_master_agent:buser -> ram_access_0_altera_axi4_master_translator:m0_buser
	wire    [1:0] ram_access_0_altera_axi4_master_translator_m0_rresp;                           // ram_access_0_altera_axi4_master_agent:rresp -> ram_access_0_altera_axi4_master_translator:m0_rresp
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_awid;                            // ram_access_0_altera_axi4_master_translator:m0_awid -> ram_access_0_altera_axi4_master_agent:awid
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_bid;                             // ram_access_0_altera_axi4_master_agent:bid -> ram_access_0_altera_axi4_master_translator:m0_bid
	wire          ram_access_0_altera_axi4_master_translator_m0_bvalid;                          // ram_access_0_altera_axi4_master_agent:bvalid -> ram_access_0_altera_axi4_master_translator:m0_bvalid
	wire    [2:0] ram_access_0_altera_axi4_master_translator_m0_awsize;                          // ram_access_0_altera_axi4_master_translator:m0_awsize -> ram_access_0_altera_axi4_master_agent:awsize
	wire          ram_access_0_altera_axi4_master_translator_m0_awvalid;                         // ram_access_0_altera_axi4_master_translator:m0_awvalid -> ram_access_0_altera_axi4_master_agent:awvalid
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_aruser;                          // ram_access_0_altera_axi4_master_translator:m0_aruser -> ram_access_0_altera_axi4_master_agent:aruser
	wire          ram_access_0_altera_axi4_master_translator_m0_rvalid;                          // ram_access_0_altera_axi4_master_agent:rvalid -> ram_access_0_altera_axi4_master_translator:m0_rvalid
	wire          f2sdram_only_master_master_translator_avalon_universal_master_0_waitrequest;   // f2sdram_only_master_master_agent:av_waitrequest -> f2sdram_only_master_master_translator:uav_waitrequest
	wire   [31:0] f2sdram_only_master_master_translator_avalon_universal_master_0_readdata;      // f2sdram_only_master_master_agent:av_readdata -> f2sdram_only_master_master_translator:uav_readdata
	wire          f2sdram_only_master_master_translator_avalon_universal_master_0_debugaccess;   // f2sdram_only_master_master_translator:uav_debugaccess -> f2sdram_only_master_master_agent:av_debugaccess
	wire   [31:0] f2sdram_only_master_master_translator_avalon_universal_master_0_address;       // f2sdram_only_master_master_translator:uav_address -> f2sdram_only_master_master_agent:av_address
	wire          f2sdram_only_master_master_translator_avalon_universal_master_0_read;          // f2sdram_only_master_master_translator:uav_read -> f2sdram_only_master_master_agent:av_read
	wire    [3:0] f2sdram_only_master_master_translator_avalon_universal_master_0_byteenable;    // f2sdram_only_master_master_translator:uav_byteenable -> f2sdram_only_master_master_agent:av_byteenable
	wire          f2sdram_only_master_master_translator_avalon_universal_master_0_readdatavalid; // f2sdram_only_master_master_agent:av_readdatavalid -> f2sdram_only_master_master_translator:uav_readdatavalid
	wire          f2sdram_only_master_master_translator_avalon_universal_master_0_lock;          // f2sdram_only_master_master_translator:uav_lock -> f2sdram_only_master_master_agent:av_lock
	wire          f2sdram_only_master_master_translator_avalon_universal_master_0_write;         // f2sdram_only_master_master_translator:uav_write -> f2sdram_only_master_master_agent:av_write
	wire   [31:0] f2sdram_only_master_master_translator_avalon_universal_master_0_writedata;     // f2sdram_only_master_master_translator:uav_writedata -> f2sdram_only_master_master_agent:av_writedata
	wire    [2:0] f2sdram_only_master_master_translator_avalon_universal_master_0_burstcount;    // f2sdram_only_master_master_translator:uav_burstcount -> f2sdram_only_master_master_agent:av_burstcount
	wire  [255:0] hps_0_f2h_sdram0_data_agent_m0_readdata;                                       // hps_0_f2h_sdram0_data_translator:uav_readdata -> hps_0_f2h_sdram0_data_agent:m0_readdata
	wire          hps_0_f2h_sdram0_data_agent_m0_waitrequest;                                    // hps_0_f2h_sdram0_data_translator:uav_waitrequest -> hps_0_f2h_sdram0_data_agent:m0_waitrequest
	wire          hps_0_f2h_sdram0_data_agent_m0_debugaccess;                                    // hps_0_f2h_sdram0_data_agent:m0_debugaccess -> hps_0_f2h_sdram0_data_translator:uav_debugaccess
	wire   [31:0] hps_0_f2h_sdram0_data_agent_m0_address;                                        // hps_0_f2h_sdram0_data_agent:m0_address -> hps_0_f2h_sdram0_data_translator:uav_address
	wire   [31:0] hps_0_f2h_sdram0_data_agent_m0_byteenable;                                     // hps_0_f2h_sdram0_data_agent:m0_byteenable -> hps_0_f2h_sdram0_data_translator:uav_byteenable
	wire          hps_0_f2h_sdram0_data_agent_m0_read;                                           // hps_0_f2h_sdram0_data_agent:m0_read -> hps_0_f2h_sdram0_data_translator:uav_read
	wire          hps_0_f2h_sdram0_data_agent_m0_readdatavalid;                                  // hps_0_f2h_sdram0_data_translator:uav_readdatavalid -> hps_0_f2h_sdram0_data_agent:m0_readdatavalid
	wire          hps_0_f2h_sdram0_data_agent_m0_lock;                                           // hps_0_f2h_sdram0_data_agent:m0_lock -> hps_0_f2h_sdram0_data_translator:uav_lock
	wire  [255:0] hps_0_f2h_sdram0_data_agent_m0_writedata;                                      // hps_0_f2h_sdram0_data_agent:m0_writedata -> hps_0_f2h_sdram0_data_translator:uav_writedata
	wire          hps_0_f2h_sdram0_data_agent_m0_write;                                          // hps_0_f2h_sdram0_data_agent:m0_write -> hps_0_f2h_sdram0_data_translator:uav_write
	wire   [12:0] hps_0_f2h_sdram0_data_agent_m0_burstcount;                                     // hps_0_f2h_sdram0_data_agent:m0_burstcount -> hps_0_f2h_sdram0_data_translator:uav_burstcount
	wire          hps_0_f2h_sdram0_data_agent_rf_source_valid;                                   // hps_0_f2h_sdram0_data_agent:rf_source_valid -> hps_0_f2h_sdram0_data_agent_rsp_fifo:in_valid
	wire  [375:0] hps_0_f2h_sdram0_data_agent_rf_source_data;                                    // hps_0_f2h_sdram0_data_agent:rf_source_data -> hps_0_f2h_sdram0_data_agent_rsp_fifo:in_data
	wire          hps_0_f2h_sdram0_data_agent_rf_source_ready;                                   // hps_0_f2h_sdram0_data_agent_rsp_fifo:in_ready -> hps_0_f2h_sdram0_data_agent:rf_source_ready
	wire          hps_0_f2h_sdram0_data_agent_rf_source_startofpacket;                           // hps_0_f2h_sdram0_data_agent:rf_source_startofpacket -> hps_0_f2h_sdram0_data_agent_rsp_fifo:in_startofpacket
	wire          hps_0_f2h_sdram0_data_agent_rf_source_endofpacket;                             // hps_0_f2h_sdram0_data_agent:rf_source_endofpacket -> hps_0_f2h_sdram0_data_agent_rsp_fifo:in_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_rsp_fifo_out_valid;                                // hps_0_f2h_sdram0_data_agent_rsp_fifo:out_valid -> hps_0_f2h_sdram0_data_agent:rf_sink_valid
	wire  [375:0] hps_0_f2h_sdram0_data_agent_rsp_fifo_out_data;                                 // hps_0_f2h_sdram0_data_agent_rsp_fifo:out_data -> hps_0_f2h_sdram0_data_agent:rf_sink_data
	wire          hps_0_f2h_sdram0_data_agent_rsp_fifo_out_ready;                                // hps_0_f2h_sdram0_data_agent:rf_sink_ready -> hps_0_f2h_sdram0_data_agent_rsp_fifo:out_ready
	wire          hps_0_f2h_sdram0_data_agent_rsp_fifo_out_startofpacket;                        // hps_0_f2h_sdram0_data_agent_rsp_fifo:out_startofpacket -> hps_0_f2h_sdram0_data_agent:rf_sink_startofpacket
	wire          hps_0_f2h_sdram0_data_agent_rsp_fifo_out_endofpacket;                          // hps_0_f2h_sdram0_data_agent_rsp_fifo:out_endofpacket -> hps_0_f2h_sdram0_data_agent:rf_sink_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_rdata_fifo_src_valid;                              // hps_0_f2h_sdram0_data_agent:rdata_fifo_src_valid -> hps_0_f2h_sdram0_data_agent_rdata_fifo:in_valid
	wire  [257:0] hps_0_f2h_sdram0_data_agent_rdata_fifo_src_data;                               // hps_0_f2h_sdram0_data_agent:rdata_fifo_src_data -> hps_0_f2h_sdram0_data_agent_rdata_fifo:in_data
	wire          hps_0_f2h_sdram0_data_agent_rdata_fifo_src_ready;                              // hps_0_f2h_sdram0_data_agent_rdata_fifo:in_ready -> hps_0_f2h_sdram0_data_agent:rdata_fifo_src_ready
	wire          ram_access_0_altera_axi4_master_agent_write_cp_valid;                          // ram_access_0_altera_axi4_master_agent:write_cp_valid -> router:sink_valid
	wire  [158:0] ram_access_0_altera_axi4_master_agent_write_cp_data;                           // ram_access_0_altera_axi4_master_agent:write_cp_data -> router:sink_data
	wire          ram_access_0_altera_axi4_master_agent_write_cp_ready;                          // router:sink_ready -> ram_access_0_altera_axi4_master_agent:write_cp_ready
	wire          ram_access_0_altera_axi4_master_agent_write_cp_startofpacket;                  // ram_access_0_altera_axi4_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          ram_access_0_altera_axi4_master_agent_write_cp_endofpacket;                    // ram_access_0_altera_axi4_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          ram_access_0_altera_axi4_master_agent_read_cp_valid;                           // ram_access_0_altera_axi4_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [158:0] ram_access_0_altera_axi4_master_agent_read_cp_data;                            // ram_access_0_altera_axi4_master_agent:read_cp_data -> router_001:sink_data
	wire          ram_access_0_altera_axi4_master_agent_read_cp_ready;                           // router_001:sink_ready -> ram_access_0_altera_axi4_master_agent:read_cp_ready
	wire          ram_access_0_altera_axi4_master_agent_read_cp_startofpacket;                   // ram_access_0_altera_axi4_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          ram_access_0_altera_axi4_master_agent_read_cp_endofpacket;                     // ram_access_0_altera_axi4_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          f2sdram_only_master_master_agent_cp_valid;                                     // f2sdram_only_master_master_agent:cp_valid -> router_002:sink_valid
	wire  [122:0] f2sdram_only_master_master_agent_cp_data;                                      // f2sdram_only_master_master_agent:cp_data -> router_002:sink_data
	wire          f2sdram_only_master_master_agent_cp_ready;                                     // router_002:sink_ready -> f2sdram_only_master_master_agent:cp_ready
	wire          f2sdram_only_master_master_agent_cp_startofpacket;                             // f2sdram_only_master_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          f2sdram_only_master_master_agent_cp_endofpacket;                               // f2sdram_only_master_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_rp_valid;                                          // hps_0_f2h_sdram0_data_agent:rp_valid -> router_003:sink_valid
	wire  [374:0] hps_0_f2h_sdram0_data_agent_rp_data;                                           // hps_0_f2h_sdram0_data_agent:rp_data -> router_003:sink_data
	wire          hps_0_f2h_sdram0_data_agent_rp_ready;                                          // router_003:sink_ready -> hps_0_f2h_sdram0_data_agent:rp_ready
	wire          hps_0_f2h_sdram0_data_agent_rp_startofpacket;                                  // hps_0_f2h_sdram0_data_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          hps_0_f2h_sdram0_data_agent_rp_endofpacket;                                    // hps_0_f2h_sdram0_data_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                          // router_003:src_valid -> rsp_demux:sink_valid
	wire  [374:0] router_003_src_data;                                                           // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                          // rsp_demux:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                                        // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                  // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                    // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                             // cmd_mux:src_valid -> hps_0_f2h_sdram0_data_burst_adapter:sink0_valid
	wire  [374:0] cmd_mux_src_data;                                                              // cmd_mux:src_data -> hps_0_f2h_sdram0_data_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                             // hps_0_f2h_sdram0_data_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                           // cmd_mux:src_channel -> hps_0_f2h_sdram0_data_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                     // cmd_mux:src_startofpacket -> hps_0_f2h_sdram0_data_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                       // cmd_mux:src_endofpacket -> hps_0_f2h_sdram0_data_burst_adapter:sink0_endofpacket
	wire          hps_0_f2h_sdram0_data_burst_adapter_source0_valid;                             // hps_0_f2h_sdram0_data_burst_adapter:source0_valid -> hps_0_f2h_sdram0_data_agent:cp_valid
	wire  [374:0] hps_0_f2h_sdram0_data_burst_adapter_source0_data;                              // hps_0_f2h_sdram0_data_burst_adapter:source0_data -> hps_0_f2h_sdram0_data_agent:cp_data
	wire          hps_0_f2h_sdram0_data_burst_adapter_source0_ready;                             // hps_0_f2h_sdram0_data_agent:cp_ready -> hps_0_f2h_sdram0_data_burst_adapter:source0_ready
	wire    [2:0] hps_0_f2h_sdram0_data_burst_adapter_source0_channel;                           // hps_0_f2h_sdram0_data_burst_adapter:source0_channel -> hps_0_f2h_sdram0_data_agent:cp_channel
	wire          hps_0_f2h_sdram0_data_burst_adapter_source0_startofpacket;                     // hps_0_f2h_sdram0_data_burst_adapter:source0_startofpacket -> hps_0_f2h_sdram0_data_agent:cp_startofpacket
	wire          hps_0_f2h_sdram0_data_burst_adapter_source0_endofpacket;                       // hps_0_f2h_sdram0_data_burst_adapter:source0_endofpacket -> hps_0_f2h_sdram0_data_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                          // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [374:0] cmd_demux_src0_data;                                                           // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                          // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                                        // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                  // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                    // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                      // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [374:0] cmd_demux_001_src0_data;                                                       // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                      // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                                    // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                              // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                      // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [374:0] cmd_demux_002_src0_data;                                                       // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                      // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire    [2:0] cmd_demux_002_src0_channel;                                                    // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                              // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                          // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [374:0] rsp_demux_src0_data;                                                           // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                          // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                                        // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                  // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                    // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                          // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [374:0] rsp_demux_src1_data;                                                           // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                          // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [2:0] rsp_demux_src1_channel;                                                        // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                  // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                    // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                          // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [374:0] rsp_demux_src2_data;                                                           // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                          // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire    [2:0] rsp_demux_src2_channel;                                                        // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                  // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                    // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_mux_src_valid;                                                             // rsp_mux:src_valid -> ram_access_0_altera_axi4_master_wr_rsp_width_adapter:in_valid
	wire  [374:0] rsp_mux_src_data;                                                              // rsp_mux:src_data -> ram_access_0_altera_axi4_master_wr_rsp_width_adapter:in_data
	wire          rsp_mux_src_ready;                                                             // ram_access_0_altera_axi4_master_wr_rsp_width_adapter:in_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                           // rsp_mux:src_channel -> ram_access_0_altera_axi4_master_wr_rsp_width_adapter:in_channel
	wire          rsp_mux_src_startofpacket;                                                     // rsp_mux:src_startofpacket -> ram_access_0_altera_axi4_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                       // rsp_mux:src_endofpacket -> ram_access_0_altera_axi4_master_wr_rsp_width_adapter:in_endofpacket
	wire          ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_valid;                // ram_access_0_altera_axi4_master_wr_rsp_width_adapter:out_valid -> ram_access_0_altera_axi4_master_agent:write_rp_valid
	wire  [158:0] ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_data;                 // ram_access_0_altera_axi4_master_wr_rsp_width_adapter:out_data -> ram_access_0_altera_axi4_master_agent:write_rp_data
	wire          ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_ready;                // ram_access_0_altera_axi4_master_agent:write_rp_ready -> ram_access_0_altera_axi4_master_wr_rsp_width_adapter:out_ready
	wire    [2:0] ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_channel;              // ram_access_0_altera_axi4_master_wr_rsp_width_adapter:out_channel -> ram_access_0_altera_axi4_master_agent:write_rp_channel
	wire          ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_startofpacket;        // ram_access_0_altera_axi4_master_wr_rsp_width_adapter:out_startofpacket -> ram_access_0_altera_axi4_master_agent:write_rp_startofpacket
	wire          ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_endofpacket;          // ram_access_0_altera_axi4_master_wr_rsp_width_adapter:out_endofpacket -> ram_access_0_altera_axi4_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                         // rsp_mux_001:src_valid -> ram_access_0_altera_axi4_master_rd_rsp_width_adapter:in_valid
	wire  [374:0] rsp_mux_001_src_data;                                                          // rsp_mux_001:src_data -> ram_access_0_altera_axi4_master_rd_rsp_width_adapter:in_data
	wire          rsp_mux_001_src_ready;                                                         // ram_access_0_altera_axi4_master_rd_rsp_width_adapter:in_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                                       // rsp_mux_001:src_channel -> ram_access_0_altera_axi4_master_rd_rsp_width_adapter:in_channel
	wire          rsp_mux_001_src_startofpacket;                                                 // rsp_mux_001:src_startofpacket -> ram_access_0_altera_axi4_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                   // rsp_mux_001:src_endofpacket -> ram_access_0_altera_axi4_master_rd_rsp_width_adapter:in_endofpacket
	wire          ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_valid;                // ram_access_0_altera_axi4_master_rd_rsp_width_adapter:out_valid -> ram_access_0_altera_axi4_master_agent:read_rp_valid
	wire  [158:0] ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_data;                 // ram_access_0_altera_axi4_master_rd_rsp_width_adapter:out_data -> ram_access_0_altera_axi4_master_agent:read_rp_data
	wire          ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_ready;                // ram_access_0_altera_axi4_master_agent:read_rp_ready -> ram_access_0_altera_axi4_master_rd_rsp_width_adapter:out_ready
	wire    [2:0] ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_channel;              // ram_access_0_altera_axi4_master_rd_rsp_width_adapter:out_channel -> ram_access_0_altera_axi4_master_agent:read_rp_channel
	wire          ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_startofpacket;        // ram_access_0_altera_axi4_master_rd_rsp_width_adapter:out_startofpacket -> ram_access_0_altera_axi4_master_agent:read_rp_startofpacket
	wire          ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_endofpacket;          // ram_access_0_altera_axi4_master_rd_rsp_width_adapter:out_endofpacket -> ram_access_0_altera_axi4_master_agent:read_rp_endofpacket
	wire          rsp_mux_002_src_valid;                                                         // rsp_mux_002:src_valid -> f2sdram_only_master_master_rsp_width_adapter:in_valid
	wire  [374:0] rsp_mux_002_src_data;                                                          // rsp_mux_002:src_data -> f2sdram_only_master_master_rsp_width_adapter:in_data
	wire          rsp_mux_002_src_ready;                                                         // f2sdram_only_master_master_rsp_width_adapter:in_ready -> rsp_mux_002:src_ready
	wire    [2:0] rsp_mux_002_src_channel;                                                       // rsp_mux_002:src_channel -> f2sdram_only_master_master_rsp_width_adapter:in_channel
	wire          rsp_mux_002_src_startofpacket;                                                 // rsp_mux_002:src_startofpacket -> f2sdram_only_master_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                   // rsp_mux_002:src_endofpacket -> f2sdram_only_master_master_rsp_width_adapter:in_endofpacket
	wire          f2sdram_only_master_master_rsp_width_adapter_src_valid;                        // f2sdram_only_master_master_rsp_width_adapter:out_valid -> f2sdram_only_master_master_agent:rp_valid
	wire  [122:0] f2sdram_only_master_master_rsp_width_adapter_src_data;                         // f2sdram_only_master_master_rsp_width_adapter:out_data -> f2sdram_only_master_master_agent:rp_data
	wire          f2sdram_only_master_master_rsp_width_adapter_src_ready;                        // f2sdram_only_master_master_agent:rp_ready -> f2sdram_only_master_master_rsp_width_adapter:out_ready
	wire    [2:0] f2sdram_only_master_master_rsp_width_adapter_src_channel;                      // f2sdram_only_master_master_rsp_width_adapter:out_channel -> f2sdram_only_master_master_agent:rp_channel
	wire          f2sdram_only_master_master_rsp_width_adapter_src_startofpacket;                // f2sdram_only_master_master_rsp_width_adapter:out_startofpacket -> f2sdram_only_master_master_agent:rp_startofpacket
	wire          f2sdram_only_master_master_rsp_width_adapter_src_endofpacket;                  // f2sdram_only_master_master_rsp_width_adapter:out_endofpacket -> f2sdram_only_master_master_agent:rp_endofpacket
	wire          router_src_valid;                                                              // router:src_valid -> ram_access_0_altera_axi4_master_wr_cmd_width_adapter:in_valid
	wire  [158:0] router_src_data;                                                               // router:src_data -> ram_access_0_altera_axi4_master_wr_cmd_width_adapter:in_data
	wire          router_src_ready;                                                              // ram_access_0_altera_axi4_master_wr_cmd_width_adapter:in_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                            // router:src_channel -> ram_access_0_altera_axi4_master_wr_cmd_width_adapter:in_channel
	wire          router_src_startofpacket;                                                      // router:src_startofpacket -> ram_access_0_altera_axi4_master_wr_cmd_width_adapter:in_startofpacket
	wire          router_src_endofpacket;                                                        // router:src_endofpacket -> ram_access_0_altera_axi4_master_wr_cmd_width_adapter:in_endofpacket
	wire          ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_valid;                // ram_access_0_altera_axi4_master_wr_cmd_width_adapter:out_valid -> cmd_demux:sink_valid
	wire  [374:0] ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_data;                 // ram_access_0_altera_axi4_master_wr_cmd_width_adapter:out_data -> cmd_demux:sink_data
	wire          ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_ready;                // cmd_demux:sink_ready -> ram_access_0_altera_axi4_master_wr_cmd_width_adapter:out_ready
	wire    [2:0] ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_channel;              // ram_access_0_altera_axi4_master_wr_cmd_width_adapter:out_channel -> cmd_demux:sink_channel
	wire          ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_startofpacket;        // ram_access_0_altera_axi4_master_wr_cmd_width_adapter:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_endofpacket;          // ram_access_0_altera_axi4_master_wr_cmd_width_adapter:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          router_001_src_valid;                                                          // router_001:src_valid -> ram_access_0_altera_axi4_master_rd_cmd_width_adapter:in_valid
	wire  [158:0] router_001_src_data;                                                           // router_001:src_data -> ram_access_0_altera_axi4_master_rd_cmd_width_adapter:in_data
	wire          router_001_src_ready;                                                          // ram_access_0_altera_axi4_master_rd_cmd_width_adapter:in_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                                        // router_001:src_channel -> ram_access_0_altera_axi4_master_rd_cmd_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                                  // router_001:src_startofpacket -> ram_access_0_altera_axi4_master_rd_cmd_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                    // router_001:src_endofpacket -> ram_access_0_altera_axi4_master_rd_cmd_width_adapter:in_endofpacket
	wire          ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_valid;                // ram_access_0_altera_axi4_master_rd_cmd_width_adapter:out_valid -> cmd_demux_001:sink_valid
	wire  [374:0] ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_data;                 // ram_access_0_altera_axi4_master_rd_cmd_width_adapter:out_data -> cmd_demux_001:sink_data
	wire          ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_ready;                // cmd_demux_001:sink_ready -> ram_access_0_altera_axi4_master_rd_cmd_width_adapter:out_ready
	wire    [2:0] ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_channel;              // ram_access_0_altera_axi4_master_rd_cmd_width_adapter:out_channel -> cmd_demux_001:sink_channel
	wire          ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_startofpacket;        // ram_access_0_altera_axi4_master_rd_cmd_width_adapter:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_endofpacket;          // ram_access_0_altera_axi4_master_rd_cmd_width_adapter:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                          // router_002:src_valid -> f2sdram_only_master_master_cmd_width_adapter:in_valid
	wire  [122:0] router_002_src_data;                                                           // router_002:src_data -> f2sdram_only_master_master_cmd_width_adapter:in_data
	wire          router_002_src_ready;                                                          // f2sdram_only_master_master_cmd_width_adapter:in_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                                        // router_002:src_channel -> f2sdram_only_master_master_cmd_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                  // router_002:src_startofpacket -> f2sdram_only_master_master_cmd_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                    // router_002:src_endofpacket -> f2sdram_only_master_master_cmd_width_adapter:in_endofpacket
	wire          f2sdram_only_master_master_cmd_width_adapter_src_valid;                        // f2sdram_only_master_master_cmd_width_adapter:out_valid -> cmd_demux_002:sink_valid
	wire  [374:0] f2sdram_only_master_master_cmd_width_adapter_src_data;                         // f2sdram_only_master_master_cmd_width_adapter:out_data -> cmd_demux_002:sink_data
	wire          f2sdram_only_master_master_cmd_width_adapter_src_ready;                        // cmd_demux_002:sink_ready -> f2sdram_only_master_master_cmd_width_adapter:out_ready
	wire    [2:0] f2sdram_only_master_master_cmd_width_adapter_src_channel;                      // f2sdram_only_master_master_cmd_width_adapter:out_channel -> cmd_demux_002:sink_channel
	wire          f2sdram_only_master_master_cmd_width_adapter_src_startofpacket;                // f2sdram_only_master_master_cmd_width_adapter:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          f2sdram_only_master_master_cmd_width_adapter_src_endofpacket;                  // f2sdram_only_master_master_cmd_width_adapter:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          hps_0_f2h_sdram0_data_agent_rdata_fifo_out_valid;                              // hps_0_f2h_sdram0_data_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [257:0] hps_0_f2h_sdram0_data_agent_rdata_fifo_out_data;                               // hps_0_f2h_sdram0_data_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          hps_0_f2h_sdram0_data_agent_rdata_fifo_out_ready;                              // avalon_st_adapter:in_0_ready -> hps_0_f2h_sdram0_data_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                 // avalon_st_adapter:out_0_valid -> hps_0_f2h_sdram0_data_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_out_0_data;                                                  // avalon_st_adapter:out_0_data -> hps_0_f2h_sdram0_data_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                 // hps_0_f2h_sdram0_data_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                 // avalon_st_adapter:out_0_error -> hps_0_f2h_sdram0_data_agent:rdata_fifo_sink_error

	altera_merlin_axi_translator #(
		.USE_S0_AWID                       (0),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (0),
		.USE_S0_AWSIZE                     (0),
		.USE_S0_AWBURST                    (0),
		.USE_S0_AWLOCK                     (0),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (0),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (0),
		.USE_S0_BRESP                      (0),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (0),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (0),
		.USE_S0_ARSIZE                     (0),
		.USE_S0_ARBURST                    (0),
		.USE_S0_ARLOCK                     (0),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (0),
		.USE_S0_RRESP                      (0),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (0),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (64),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (1),
		.USE_S0_ARUSER                     (1),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4")
	) ram_access_0_altera_axi4_master_translator (
		.aclk        (clk_0_clk_clk),                                          //       clk.clk
		.aresetn     (~ram_access_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset_n
		.m0_awid     (ram_access_0_altera_axi4_master_translator_m0_awid),     //        m0.awid
		.m0_awaddr   (ram_access_0_altera_axi4_master_translator_m0_awaddr),   //          .awaddr
		.m0_awlen    (ram_access_0_altera_axi4_master_translator_m0_awlen),    //          .awlen
		.m0_awsize   (ram_access_0_altera_axi4_master_translator_m0_awsize),   //          .awsize
		.m0_awburst  (ram_access_0_altera_axi4_master_translator_m0_awburst),  //          .awburst
		.m0_awlock   (ram_access_0_altera_axi4_master_translator_m0_awlock),   //          .awlock
		.m0_awcache  (ram_access_0_altera_axi4_master_translator_m0_awcache),  //          .awcache
		.m0_awprot   (ram_access_0_altera_axi4_master_translator_m0_awprot),   //          .awprot
		.m0_awuser   (ram_access_0_altera_axi4_master_translator_m0_awuser),   //          .awuser
		.m0_awqos    (ram_access_0_altera_axi4_master_translator_m0_awqos),    //          .awqos
		.m0_awregion (ram_access_0_altera_axi4_master_translator_m0_awregion), //          .awregion
		.m0_awvalid  (ram_access_0_altera_axi4_master_translator_m0_awvalid),  //          .awvalid
		.m0_awready  (ram_access_0_altera_axi4_master_translator_m0_awready),  //          .awready
		.m0_wdata    (ram_access_0_altera_axi4_master_translator_m0_wdata),    //          .wdata
		.m0_wstrb    (ram_access_0_altera_axi4_master_translator_m0_wstrb),    //          .wstrb
		.m0_wlast    (ram_access_0_altera_axi4_master_translator_m0_wlast),    //          .wlast
		.m0_wvalid   (ram_access_0_altera_axi4_master_translator_m0_wvalid),   //          .wvalid
		.m0_wuser    (ram_access_0_altera_axi4_master_translator_m0_wuser),    //          .wuser
		.m0_wready   (ram_access_0_altera_axi4_master_translator_m0_wready),   //          .wready
		.m0_bid      (ram_access_0_altera_axi4_master_translator_m0_bid),      //          .bid
		.m0_bresp    (ram_access_0_altera_axi4_master_translator_m0_bresp),    //          .bresp
		.m0_buser    (ram_access_0_altera_axi4_master_translator_m0_buser),    //          .buser
		.m0_bvalid   (ram_access_0_altera_axi4_master_translator_m0_bvalid),   //          .bvalid
		.m0_bready   (ram_access_0_altera_axi4_master_translator_m0_bready),   //          .bready
		.m0_arid     (ram_access_0_altera_axi4_master_translator_m0_arid),     //          .arid
		.m0_araddr   (ram_access_0_altera_axi4_master_translator_m0_araddr),   //          .araddr
		.m0_arlen    (ram_access_0_altera_axi4_master_translator_m0_arlen),    //          .arlen
		.m0_arsize   (ram_access_0_altera_axi4_master_translator_m0_arsize),   //          .arsize
		.m0_arburst  (ram_access_0_altera_axi4_master_translator_m0_arburst),  //          .arburst
		.m0_arlock   (ram_access_0_altera_axi4_master_translator_m0_arlock),   //          .arlock
		.m0_arcache  (ram_access_0_altera_axi4_master_translator_m0_arcache),  //          .arcache
		.m0_arprot   (ram_access_0_altera_axi4_master_translator_m0_arprot),   //          .arprot
		.m0_aruser   (ram_access_0_altera_axi4_master_translator_m0_aruser),   //          .aruser
		.m0_arqos    (ram_access_0_altera_axi4_master_translator_m0_arqos),    //          .arqos
		.m0_arregion (ram_access_0_altera_axi4_master_translator_m0_arregion), //          .arregion
		.m0_arvalid  (ram_access_0_altera_axi4_master_translator_m0_arvalid),  //          .arvalid
		.m0_arready  (ram_access_0_altera_axi4_master_translator_m0_arready),  //          .arready
		.m0_rid      (ram_access_0_altera_axi4_master_translator_m0_rid),      //          .rid
		.m0_rdata    (ram_access_0_altera_axi4_master_translator_m0_rdata),    //          .rdata
		.m0_rresp    (ram_access_0_altera_axi4_master_translator_m0_rresp),    //          .rresp
		.m0_rlast    (ram_access_0_altera_axi4_master_translator_m0_rlast),    //          .rlast
		.m0_rvalid   (ram_access_0_altera_axi4_master_translator_m0_rvalid),   //          .rvalid
		.m0_rready   (ram_access_0_altera_axi4_master_translator_m0_rready),   //          .rready
		.m0_ruser    (ram_access_0_altera_axi4_master_translator_m0_ruser),    //          .ruser
		.s0_awaddr   (ram_access_0_altera_axi4_master_awaddr),                 //        s0.awaddr
		.s0_awcache  (ram_access_0_altera_axi4_master_awcache),                //          .awcache
		.s0_awprot   (ram_access_0_altera_axi4_master_awprot),                 //          .awprot
		.s0_awuser   (ram_access_0_altera_axi4_master_awuser),                 //          .awuser
		.s0_awvalid  (ram_access_0_altera_axi4_master_awvalid),                //          .awvalid
		.s0_awready  (ram_access_0_altera_axi4_master_awready),                //          .awready
		.s0_wdata    (ram_access_0_altera_axi4_master_wdata),                  //          .wdata
		.s0_wlast    (ram_access_0_altera_axi4_master_wlast),                  //          .wlast
		.s0_wvalid   (ram_access_0_altera_axi4_master_wvalid),                 //          .wvalid
		.s0_wready   (ram_access_0_altera_axi4_master_wready),                 //          .wready
		.s0_bvalid   (ram_access_0_altera_axi4_master_bvalid),                 //          .bvalid
		.s0_bready   (ram_access_0_altera_axi4_master_bready),                 //          .bready
		.s0_araddr   (ram_access_0_altera_axi4_master_araddr),                 //          .araddr
		.s0_arcache  (ram_access_0_altera_axi4_master_arcache),                //          .arcache
		.s0_arprot   (ram_access_0_altera_axi4_master_arprot),                 //          .arprot
		.s0_aruser   (ram_access_0_altera_axi4_master_aruser),                 //          .aruser
		.s0_arvalid  (ram_access_0_altera_axi4_master_arvalid),                //          .arvalid
		.s0_arready  (ram_access_0_altera_axi4_master_arready),                //          .arready
		.s0_rdata    (ram_access_0_altera_axi4_master_rdata),                  //          .rdata
		.s0_rvalid   (ram_access_0_altera_axi4_master_rvalid),                 //          .rvalid
		.s0_rready   (ram_access_0_altera_axi4_master_rready),                 //          .rready
		.s0_awid     (1'b0),                                                   // (terminated)
		.s0_awlen    (8'b00000000),                                            // (terminated)
		.s0_awsize   (3'b000),                                                 // (terminated)
		.s0_awburst  (2'b00),                                                  // (terminated)
		.s0_awlock   (1'b0),                                                   // (terminated)
		.s0_awqos    (4'b0000),                                                // (terminated)
		.s0_awregion (4'b0000),                                                // (terminated)
		.s0_wstrb    (8'b11111111),                                            // (terminated)
		.s0_wuser    (1'b0),                                                   // (terminated)
		.s0_bid      (),                                                       // (terminated)
		.s0_bresp    (),                                                       // (terminated)
		.s0_buser    (),                                                       // (terminated)
		.s0_arid     (1'b0),                                                   // (terminated)
		.s0_arlen    (8'b00000000),                                            // (terminated)
		.s0_arsize   (3'b000),                                                 // (terminated)
		.s0_arburst  (2'b00),                                                  // (terminated)
		.s0_arlock   (1'b0),                                                   // (terminated)
		.s0_arqos    (4'b0000),                                                // (terminated)
		.s0_arregion (4'b0000),                                                // (terminated)
		.s0_rid      (),                                                       // (terminated)
		.s0_rresp    (),                                                       // (terminated)
		.s0_rlast    (),                                                       // (terminated)
		.s0_ruser    (),                                                       // (terminated)
		.s0_wid      (1'b0),                                                   // (terminated)
		.m0_wid      ()                                                        // (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) f2sdram_only_master_master_translator (
		.clk                    (clk_0_clk_clk),                                                                 //                       clk.clk
		.reset                  (ram_access_0_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (f2sdram_only_master_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (f2sdram_only_master_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (f2sdram_only_master_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (f2sdram_only_master_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (f2sdram_only_master_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (f2sdram_only_master_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (f2sdram_only_master_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (f2sdram_only_master_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (f2sdram_only_master_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (f2sdram_only_master_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (f2sdram_only_master_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (f2sdram_only_master_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (f2sdram_only_master_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (f2sdram_only_master_master_byteenable),                                         //                          .byteenable
		.av_read                (f2sdram_only_master_master_read),                                               //                          .read
		.av_readdata            (f2sdram_only_master_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (f2sdram_only_master_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (f2sdram_only_master_master_write),                                              //                          .write
		.av_writedata           (f2sdram_only_master_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (27),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hps_0_f2h_sdram0_data_translator (
		.clk                    (clk_0_clk_clk),                                                      //                      clk.clk
		.reset                  (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hps_0_f2h_sdram0_data_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (hps_0_f2h_sdram0_data_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (hps_0_f2h_sdram0_data_agent_m0_read),                                //                         .read
		.uav_write              (hps_0_f2h_sdram0_data_agent_m0_write),                               //                         .write
		.uav_waitrequest        (hps_0_f2h_sdram0_data_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (hps_0_f2h_sdram0_data_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (hps_0_f2h_sdram0_data_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (hps_0_f2h_sdram0_data_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (hps_0_f2h_sdram0_data_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (hps_0_f2h_sdram0_data_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (hps_0_f2h_sdram0_data_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (hps_0_f2h_sdram0_data_address),                                      //      avalon_anti_slave_0.address
		.av_write               (hps_0_f2h_sdram0_data_write),                                        //                         .write
		.av_read                (hps_0_f2h_sdram0_data_read),                                         //                         .read
		.av_readdata            (hps_0_f2h_sdram0_data_readdata),                                     //                         .readdata
		.av_writedata           (hps_0_f2h_sdram0_data_writedata),                                    //                         .writedata
		.av_burstcount          (hps_0_f2h_sdram0_data_burstcount),                                   //                         .burstcount
		.av_byteenable          (hps_0_f2h_sdram0_data_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (hps_0_f2h_sdram0_data_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (hps_0_f2h_sdram0_data_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                                   //              (terminated)
		.av_writebyteenable     (),                                                                   //              (terminated)
		.av_lock                (),                                                                   //              (terminated)
		.av_chipselect          (),                                                                   //              (terminated)
		.av_clken               (),                                                                   //              (terminated)
		.uav_clken              (1'b0),                                                               //              (terminated)
		.av_debugaccess         (),                                                                   //              (terminated)
		.av_outputenable        (),                                                                   //              (terminated)
		.uav_response           (),                                                                   //              (terminated)
		.av_response            (2'b00),                                                              //              (terminated)
		.uav_writeresponsevalid (),                                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (139),
		.PKT_CACHE_H               (153),
		.PKT_CACHE_L               (150),
		.PKT_ADDR_SIDEBAND_H       (137),
		.PKT_ADDR_SIDEBAND_L       (137),
		.PKT_PROTECTION_H          (149),
		.PKT_PROTECTION_L          (147),
		.PKT_BURST_SIZE_H          (134),
		.PKT_BURST_SIZE_L          (132),
		.PKT_BURST_TYPE_H          (136),
		.PKT_BURST_TYPE_L          (135),
		.PKT_RESPONSE_STATUS_L     (154),
		.PKT_RESPONSE_STATUS_H     (155),
		.PKT_BURSTWRAP_H           (131),
		.PKT_BURSTWRAP_L           (124),
		.PKT_BYTE_CNT_H            (123),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (144),
		.PKT_SRC_ID_L              (144),
		.PKT_DEST_ID_H             (145),
		.PKT_DEST_ID_L             (145),
		.PKT_THREAD_ID_H           (146),
		.PKT_THREAD_ID_L           (146),
		.PKT_QOS_L                 (140),
		.PKT_QOS_H                 (143),
		.PKT_ORI_BURST_SIZE_L      (156),
		.PKT_ORI_BURST_SIZE_H      (158),
		.PKT_DATA_SIDEBAND_H       (138),
		.PKT_DATA_SIDEBAND_L       (138),
		.ST_DATA_W                 (159),
		.ST_CHANNEL_W              (3),
		.ID                        (1)
	) ram_access_0_altera_axi4_master_agent (
		.aclk                   (clk_0_clk_clk),                                                          //              clk.clk
		.aresetn                (~ram_access_0_reset_reset_bridge_in_reset_reset),                        //        clk_reset.reset_n
		.write_cp_valid         (ram_access_0_altera_axi4_master_agent_write_cp_valid),                   //         write_cp.valid
		.write_cp_data          (ram_access_0_altera_axi4_master_agent_write_cp_data),                    //                 .data
		.write_cp_startofpacket (ram_access_0_altera_axi4_master_agent_write_cp_startofpacket),           //                 .startofpacket
		.write_cp_endofpacket   (ram_access_0_altera_axi4_master_agent_write_cp_endofpacket),             //                 .endofpacket
		.write_cp_ready         (ram_access_0_altera_axi4_master_agent_write_cp_ready),                   //                 .ready
		.write_rp_valid         (ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_valid),         //         write_rp.valid
		.write_rp_data          (ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_data),          //                 .data
		.write_rp_channel       (ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_channel),       //                 .channel
		.write_rp_startofpacket (ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_startofpacket), //                 .startofpacket
		.write_rp_endofpacket   (ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_endofpacket),   //                 .endofpacket
		.write_rp_ready         (ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_ready),         //                 .ready
		.read_cp_valid          (ram_access_0_altera_axi4_master_agent_read_cp_valid),                    //          read_cp.valid
		.read_cp_data           (ram_access_0_altera_axi4_master_agent_read_cp_data),                     //                 .data
		.read_cp_startofpacket  (ram_access_0_altera_axi4_master_agent_read_cp_startofpacket),            //                 .startofpacket
		.read_cp_endofpacket    (ram_access_0_altera_axi4_master_agent_read_cp_endofpacket),              //                 .endofpacket
		.read_cp_ready          (ram_access_0_altera_axi4_master_agent_read_cp_ready),                    //                 .ready
		.read_rp_valid          (ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_valid),         //          read_rp.valid
		.read_rp_data           (ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_data),          //                 .data
		.read_rp_channel        (ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_channel),       //                 .channel
		.read_rp_startofpacket  (ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_startofpacket), //                 .startofpacket
		.read_rp_endofpacket    (ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_endofpacket),   //                 .endofpacket
		.read_rp_ready          (ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_ready),         //                 .ready
		.awid                   (ram_access_0_altera_axi4_master_translator_m0_awid),                     // altera_axi_slave.awid
		.awaddr                 (ram_access_0_altera_axi4_master_translator_m0_awaddr),                   //                 .awaddr
		.awlen                  (ram_access_0_altera_axi4_master_translator_m0_awlen),                    //                 .awlen
		.awsize                 (ram_access_0_altera_axi4_master_translator_m0_awsize),                   //                 .awsize
		.awburst                (ram_access_0_altera_axi4_master_translator_m0_awburst),                  //                 .awburst
		.awlock                 (ram_access_0_altera_axi4_master_translator_m0_awlock),                   //                 .awlock
		.awcache                (ram_access_0_altera_axi4_master_translator_m0_awcache),                  //                 .awcache
		.awprot                 (ram_access_0_altera_axi4_master_translator_m0_awprot),                   //                 .awprot
		.awuser                 (ram_access_0_altera_axi4_master_translator_m0_awuser),                   //                 .awuser
		.awqos                  (ram_access_0_altera_axi4_master_translator_m0_awqos),                    //                 .awqos
		.awregion               (ram_access_0_altera_axi4_master_translator_m0_awregion),                 //                 .awregion
		.awvalid                (ram_access_0_altera_axi4_master_translator_m0_awvalid),                  //                 .awvalid
		.awready                (ram_access_0_altera_axi4_master_translator_m0_awready),                  //                 .awready
		.wdata                  (ram_access_0_altera_axi4_master_translator_m0_wdata),                    //                 .wdata
		.wstrb                  (ram_access_0_altera_axi4_master_translator_m0_wstrb),                    //                 .wstrb
		.wlast                  (ram_access_0_altera_axi4_master_translator_m0_wlast),                    //                 .wlast
		.wvalid                 (ram_access_0_altera_axi4_master_translator_m0_wvalid),                   //                 .wvalid
		.wuser                  (ram_access_0_altera_axi4_master_translator_m0_wuser),                    //                 .wuser
		.wready                 (ram_access_0_altera_axi4_master_translator_m0_wready),                   //                 .wready
		.bid                    (ram_access_0_altera_axi4_master_translator_m0_bid),                      //                 .bid
		.bresp                  (ram_access_0_altera_axi4_master_translator_m0_bresp),                    //                 .bresp
		.buser                  (ram_access_0_altera_axi4_master_translator_m0_buser),                    //                 .buser
		.bvalid                 (ram_access_0_altera_axi4_master_translator_m0_bvalid),                   //                 .bvalid
		.bready                 (ram_access_0_altera_axi4_master_translator_m0_bready),                   //                 .bready
		.arid                   (ram_access_0_altera_axi4_master_translator_m0_arid),                     //                 .arid
		.araddr                 (ram_access_0_altera_axi4_master_translator_m0_araddr),                   //                 .araddr
		.arlen                  (ram_access_0_altera_axi4_master_translator_m0_arlen),                    //                 .arlen
		.arsize                 (ram_access_0_altera_axi4_master_translator_m0_arsize),                   //                 .arsize
		.arburst                (ram_access_0_altera_axi4_master_translator_m0_arburst),                  //                 .arburst
		.arlock                 (ram_access_0_altera_axi4_master_translator_m0_arlock),                   //                 .arlock
		.arcache                (ram_access_0_altera_axi4_master_translator_m0_arcache),                  //                 .arcache
		.arprot                 (ram_access_0_altera_axi4_master_translator_m0_arprot),                   //                 .arprot
		.aruser                 (ram_access_0_altera_axi4_master_translator_m0_aruser),                   //                 .aruser
		.arqos                  (ram_access_0_altera_axi4_master_translator_m0_arqos),                    //                 .arqos
		.arregion               (ram_access_0_altera_axi4_master_translator_m0_arregion),                 //                 .arregion
		.arvalid                (ram_access_0_altera_axi4_master_translator_m0_arvalid),                  //                 .arvalid
		.arready                (ram_access_0_altera_axi4_master_translator_m0_arready),                  //                 .arready
		.rid                    (ram_access_0_altera_axi4_master_translator_m0_rid),                      //                 .rid
		.rdata                  (ram_access_0_altera_axi4_master_translator_m0_rdata),                    //                 .rdata
		.rresp                  (ram_access_0_altera_axi4_master_translator_m0_rresp),                    //                 .rresp
		.rlast                  (ram_access_0_altera_axi4_master_translator_m0_rlast),                    //                 .rlast
		.rvalid                 (ram_access_0_altera_axi4_master_translator_m0_rvalid),                   //                 .rvalid
		.rready                 (ram_access_0_altera_axi4_master_translator_m0_rready),                   //                 .rready
		.ruser                  (ram_access_0_altera_axi4_master_translator_m0_ruser),                    //                 .ruser
		.wid                    (1'b0)                                                                    //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (122),
		.PKT_ORI_BURST_SIZE_L      (120),
		.PKT_RESPONSE_STATUS_H     (119),
		.PKT_RESPONSE_STATUS_L     (118),
		.PKT_QOS_H                 (107),
		.PKT_QOS_L                 (104),
		.PKT_DATA_SIDEBAND_H       (102),
		.PKT_DATA_SIDEBAND_L       (102),
		.PKT_ADDR_SIDEBAND_H       (101),
		.PKT_ADDR_SIDEBAND_L       (101),
		.PKT_BURST_TYPE_H          (100),
		.PKT_BURST_TYPE_L          (99),
		.PKT_CACHE_H               (117),
		.PKT_CACHE_L               (114),
		.PKT_THREAD_ID_H           (110),
		.PKT_THREAD_ID_L           (110),
		.PKT_BURST_SIZE_H          (98),
		.PKT_BURST_SIZE_L          (96),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (103),
		.PKT_PROTECTION_H          (113),
		.PKT_PROTECTION_L          (111),
		.PKT_BURSTWRAP_H           (95),
		.PKT_BURSTWRAP_L           (88),
		.PKT_BYTE_CNT_H            (87),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (108),
		.PKT_SRC_ID_L              (108),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (109),
		.ST_DATA_W                 (123),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) f2sdram_only_master_master_agent (
		.clk                   (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                 (ram_access_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (f2sdram_only_master_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (f2sdram_only_master_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (f2sdram_only_master_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (f2sdram_only_master_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (f2sdram_only_master_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (f2sdram_only_master_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (f2sdram_only_master_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (f2sdram_only_master_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (f2sdram_only_master_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (f2sdram_only_master_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (f2sdram_only_master_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (f2sdram_only_master_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (f2sdram_only_master_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (f2sdram_only_master_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (f2sdram_only_master_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (f2sdram_only_master_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (f2sdram_only_master_master_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (f2sdram_only_master_master_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (f2sdram_only_master_master_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (f2sdram_only_master_master_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (f2sdram_only_master_master_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (f2sdram_only_master_master_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (374),
		.PKT_ORI_BURST_SIZE_L      (372),
		.PKT_RESPONSE_STATUS_H     (371),
		.PKT_RESPONSE_STATUS_L     (370),
		.PKT_BURST_SIZE_H          (350),
		.PKT_BURST_SIZE_L          (348),
		.PKT_TRANS_LOCK            (324),
		.PKT_BEGIN_BURST           (355),
		.PKT_PROTECTION_H          (365),
		.PKT_PROTECTION_L          (363),
		.PKT_BURSTWRAP_H           (347),
		.PKT_BURSTWRAP_L           (340),
		.PKT_BYTE_CNT_H            (339),
		.PKT_BYTE_CNT_L            (326),
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_POSTED          (321),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (360),
		.PKT_SRC_ID_L              (360),
		.PKT_DEST_ID_H             (361),
		.PKT_DEST_ID_L             (361),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (375),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hps_0_f2h_sdram0_data_agent (
		.clk                     (clk_0_clk_clk),                                                      //             clk.clk
		.reset                   (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hps_0_f2h_sdram0_data_agent_m0_address),                             //              m0.address
		.m0_burstcount           (hps_0_f2h_sdram0_data_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (hps_0_f2h_sdram0_data_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (hps_0_f2h_sdram0_data_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (hps_0_f2h_sdram0_data_agent_m0_lock),                                //                .lock
		.m0_readdata             (hps_0_f2h_sdram0_data_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (hps_0_f2h_sdram0_data_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (hps_0_f2h_sdram0_data_agent_m0_read),                                //                .read
		.m0_waitrequest          (hps_0_f2h_sdram0_data_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (hps_0_f2h_sdram0_data_agent_m0_writedata),                           //                .writedata
		.m0_write                (hps_0_f2h_sdram0_data_agent_m0_write),                               //                .write
		.rp_endofpacket          (hps_0_f2h_sdram0_data_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (hps_0_f2h_sdram0_data_agent_rp_ready),                               //                .ready
		.rp_valid                (hps_0_f2h_sdram0_data_agent_rp_valid),                               //                .valid
		.rp_data                 (hps_0_f2h_sdram0_data_agent_rp_data),                                //                .data
		.rp_startofpacket        (hps_0_f2h_sdram0_data_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (hps_0_f2h_sdram0_data_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (hps_0_f2h_sdram0_data_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (hps_0_f2h_sdram0_data_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (hps_0_f2h_sdram0_data_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (hps_0_f2h_sdram0_data_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (hps_0_f2h_sdram0_data_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (hps_0_f2h_sdram0_data_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (hps_0_f2h_sdram0_data_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (hps_0_f2h_sdram0_data_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (hps_0_f2h_sdram0_data_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (hps_0_f2h_sdram0_data_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (376),
		.FIFO_DEPTH          (15),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_0_f2h_sdram0_data_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hps_0_f2h_sdram0_data_agent_rf_source_data),                         //        in.data
		.in_valid          (hps_0_f2h_sdram0_data_agent_rf_source_valid),                        //          .valid
		.in_ready          (hps_0_f2h_sdram0_data_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (hps_0_f2h_sdram0_data_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (hps_0_f2h_sdram0_data_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (hps_0_f2h_sdram0_data_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (258),
		.FIFO_DEPTH          (1024),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_0_f2h_sdram0_data_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (hps_0_f2h_sdram0_data_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_startofpacket  (1'b0),                                                               // (terminated)
		.in_endofpacket    (1'b0),                                                               // (terminated)
		.out_startofpacket (),                                                                   // (terminated)
		.out_endofpacket   (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (ram_access_0_altera_axi4_master_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (ram_access_0_altera_axi4_master_agent_write_cp_valid),         //          .valid
		.sink_data          (ram_access_0_altera_axi4_master_agent_write_cp_data),          //          .data
		.sink_startofpacket (ram_access_0_altera_axi4_master_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ram_access_0_altera_axi4_master_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                //       clk.clk
		.reset              (ram_access_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_src_ready),                                             //       src.ready
		.src_valid          (router_src_valid),                                             //          .valid
		.src_data           (router_src_data),                                              //          .data
		.src_channel        (router_src_channel),                                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router router_001 (
		.sink_ready         (ram_access_0_altera_axi4_master_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (ram_access_0_altera_axi4_master_agent_read_cp_valid),         //          .valid
		.sink_data          (ram_access_0_altera_axi4_master_agent_read_cp_data),          //          .data
		.sink_startofpacket (ram_access_0_altera_axi4_master_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ram_access_0_altera_axi4_master_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (ram_access_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_001_src_ready),                                        //       src.ready
		.src_valid          (router_001_src_valid),                                        //          .valid
		.src_data           (router_001_src_data),                                         //          .data
		.src_channel        (router_001_src_channel),                                      //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (f2sdram_only_master_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (f2sdram_only_master_master_agent_cp_valid),         //          .valid
		.sink_data          (f2sdram_only_master_master_agent_cp_data),          //          .data
		.sink_startofpacket (f2sdram_only_master_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (f2sdram_only_master_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (ram_access_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_002_src_ready),                              //       src.ready
		.src_valid          (router_002_src_valid),                              //          .valid
		.src_data           (router_002_src_data),                               //          .data
		.src_channel        (router_002_src_channel),                            //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (hps_0_f2h_sdram0_data_agent_rp_ready),                               //      sink.ready
		.sink_valid         (hps_0_f2h_sdram0_data_agent_rp_valid),                               //          .valid
		.sink_data          (hps_0_f2h_sdram0_data_agent_rp_data),                                //          .data
		.sink_startofpacket (hps_0_f2h_sdram0_data_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (hps_0_f2h_sdram0_data_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                               //       src.ready
		.src_valid          (router_003_src_valid),                                               //          .valid
		.src_data           (router_003_src_data),                                                //          .data
		.src_channel        (router_003_src_channel),                                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                          //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (319),
		.PKT_ADDR_L                (288),
		.PKT_BEGIN_BURST           (355),
		.PKT_BYTE_CNT_H            (339),
		.PKT_BYTE_CNT_L            (326),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_BURST_SIZE_H          (350),
		.PKT_BURST_SIZE_L          (348),
		.PKT_BURST_TYPE_H          (352),
		.PKT_BURST_TYPE_L          (351),
		.PKT_BURSTWRAP_H           (347),
		.PKT_BURSTWRAP_L           (340),
		.PKT_TRANS_COMPRESSED_READ (320),
		.PKT_TRANS_WRITE           (322),
		.PKT_TRANS_READ            (323),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (375),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (338),
		.OUT_BURSTWRAP_H           (347),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hps_0_f2h_sdram0_data_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                      //       cr0.clk
		.reset                 (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                  //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                   //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                            //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                  //          .ready
		.source0_valid         (hps_0_f2h_sdram0_data_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (hps_0_f2h_sdram0_data_burst_adapter_source0_data),                   //          .data
		.source0_channel       (hps_0_f2h_sdram0_data_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (hps_0_f2h_sdram0_data_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (hps_0_f2h_sdram0_data_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (hps_0_f2h_sdram0_data_burst_adapter_source0_ready)                   //          .ready
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                          //       clk.clk
		.reset              (ram_access_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.sink_ready         (ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                   //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                   //          .valid
		.src0_data          (cmd_demux_src0_data),                                                    //          .data
		.src0_channel       (cmd_demux_src0_channel),                                                 //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                           //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                              //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                          //       clk.clk
		.reset              (ram_access_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.sink_ready         (ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                               //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                               //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                                //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                             //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                       //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                                  //       clk.clk
		.reset              (ram_access_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.sink_ready         (f2sdram_only_master_master_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (f2sdram_only_master_master_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (f2sdram_only_master_master_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (f2sdram_only_master_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (f2sdram_only_master_master_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (f2sdram_only_master_master_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                       //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                       //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                        //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                     //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                      //       clk.clk
		.reset               (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                  //          .valid
		.src_data            (cmd_mux_src_data),                                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                            //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                               //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                               //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                             //          .channel
		.sink0_data          (cmd_demux_src0_data),                                                //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                           //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                         //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                            //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                                     //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                           //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                           //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                         //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                            //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                               //      sink.ready
		.sink_channel       (router_003_src_channel),                                             //          .channel
		.sink_data          (router_003_src_data),                                                //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                       //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                         //          .endofpacket
		.sink_valid         (router_003_src_valid),                                               //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                               //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                               //          .valid
		.src0_data          (rsp_demux_src0_data),                                                //          .data
		.src0_channel       (rsp_demux_src0_channel),                                             //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                         //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                               //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                               //          .valid
		.src1_data          (rsp_demux_src1_data),                                                //          .data
		.src1_channel       (rsp_demux_src1_channel),                                             //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                       //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                         //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                               //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                               //          .valid
		.src2_data          (rsp_demux_src2_data),                                                //          .data
		.src2_channel       (rsp_demux_src2_channel),                                             //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                                       //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                                          //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (ram_access_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                              //       src.ready
		.src_valid           (rsp_mux_src_valid),                              //          .valid
		.src_data            (rsp_mux_src_data),                               //          .data
		.src_channel         (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                         //          .channel
		.sink0_data          (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (ram_access_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                         //          .channel
		.sink0_data          (rsp_demux_src1_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (ram_access_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                          //          .valid
		.src_data            (rsp_mux_002_src_data),                           //          .data
		.src_channel         (rsp_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                         //          .channel
		.sink0_data          (rsp_demux_src2_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket)                      //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (339),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (347),
		.IN_PKT_BURSTWRAP_L            (340),
		.IN_PKT_BURST_SIZE_H           (350),
		.IN_PKT_BURST_SIZE_L           (348),
		.IN_PKT_RESPONSE_STATUS_H      (371),
		.IN_PKT_RESPONSE_STATUS_L      (370),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (352),
		.IN_PKT_BURST_TYPE_L           (351),
		.IN_PKT_ORI_BURST_SIZE_L       (372),
		.IN_PKT_ORI_BURST_SIZE_H       (374),
		.IN_ST_DATA_W                  (375),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (123),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (134),
		.OUT_PKT_BURST_SIZE_L          (132),
		.OUT_PKT_RESPONSE_STATUS_H     (155),
		.OUT_PKT_RESPONSE_STATUS_L     (154),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (136),
		.OUT_PKT_BURST_TYPE_L          (135),
		.OUT_PKT_ORI_BURST_SIZE_L      (156),
		.OUT_PKT_ORI_BURST_SIZE_H      (158),
		.OUT_ST_DATA_W                 (159),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ram_access_0_altera_axi4_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                          //       clk.clk
		.reset                (ram_access_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (rsp_mux_src_valid),                                                      //      sink.valid
		.in_channel           (rsp_mux_src_channel),                                                    //          .channel
		.in_startofpacket     (rsp_mux_src_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (rsp_mux_src_endofpacket),                                                //          .endofpacket
		.in_ready             (rsp_mux_src_ready),                                                      //          .ready
		.in_data              (rsp_mux_src_data),                                                       //          .data
		.out_endofpacket      (ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ram_access_0_altera_axi4_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (339),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (347),
		.IN_PKT_BURSTWRAP_L            (340),
		.IN_PKT_BURST_SIZE_H           (350),
		.IN_PKT_BURST_SIZE_L           (348),
		.IN_PKT_RESPONSE_STATUS_H      (371),
		.IN_PKT_RESPONSE_STATUS_L      (370),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (352),
		.IN_PKT_BURST_TYPE_L           (351),
		.IN_PKT_ORI_BURST_SIZE_L       (372),
		.IN_PKT_ORI_BURST_SIZE_H       (374),
		.IN_ST_DATA_W                  (375),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (123),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (134),
		.OUT_PKT_BURST_SIZE_L          (132),
		.OUT_PKT_RESPONSE_STATUS_H     (155),
		.OUT_PKT_RESPONSE_STATUS_L     (154),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (136),
		.OUT_PKT_BURST_TYPE_L          (135),
		.OUT_PKT_ORI_BURST_SIZE_L      (156),
		.OUT_PKT_ORI_BURST_SIZE_H      (158),
		.OUT_ST_DATA_W                 (159),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ram_access_0_altera_axi4_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                          //       clk.clk
		.reset                (ram_access_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (rsp_mux_001_src_valid),                                                  //      sink.valid
		.in_channel           (rsp_mux_001_src_channel),                                                //          .channel
		.in_startofpacket     (rsp_mux_001_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (rsp_mux_001_src_endofpacket),                                            //          .endofpacket
		.in_ready             (rsp_mux_001_src_ready),                                                  //          .ready
		.in_data              (rsp_mux_001_src_data),                                                   //          .data
		.out_endofpacket      (ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ram_access_0_altera_axi4_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (319),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (339),
		.IN_PKT_BYTE_CNT_L             (326),
		.IN_PKT_TRANS_COMPRESSED_READ  (320),
		.IN_PKT_TRANS_WRITE            (322),
		.IN_PKT_BURSTWRAP_H            (347),
		.IN_PKT_BURSTWRAP_L            (340),
		.IN_PKT_BURST_SIZE_H           (350),
		.IN_PKT_BURST_SIZE_L           (348),
		.IN_PKT_RESPONSE_STATUS_H      (371),
		.IN_PKT_RESPONSE_STATUS_L      (370),
		.IN_PKT_TRANS_EXCLUSIVE        (325),
		.IN_PKT_BURST_TYPE_H           (352),
		.IN_PKT_BURST_TYPE_L           (351),
		.IN_PKT_ORI_BURST_SIZE_L       (372),
		.IN_PKT_ORI_BURST_SIZE_H       (374),
		.IN_ST_DATA_W                  (375),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (87),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (98),
		.OUT_PKT_BURST_SIZE_L          (96),
		.OUT_PKT_RESPONSE_STATUS_H     (119),
		.OUT_PKT_RESPONSE_STATUS_L     (118),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (100),
		.OUT_PKT_BURST_TYPE_L          (99),
		.OUT_PKT_ORI_BURST_SIZE_L      (120),
		.OUT_PKT_ORI_BURST_SIZE_H      (122),
		.OUT_ST_DATA_W                 (123),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) f2sdram_only_master_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                  //       clk.clk
		.reset                (ram_access_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (rsp_mux_002_src_valid),                                          //      sink.valid
		.in_channel           (rsp_mux_002_src_channel),                                        //          .channel
		.in_startofpacket     (rsp_mux_002_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (rsp_mux_002_src_endofpacket),                                    //          .endofpacket
		.in_ready             (rsp_mux_002_src_ready),                                          //          .ready
		.in_data              (rsp_mux_002_src_data),                                           //          .data
		.out_endofpacket      (f2sdram_only_master_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (f2sdram_only_master_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (f2sdram_only_master_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (f2sdram_only_master_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (f2sdram_only_master_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (f2sdram_only_master_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (123),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (131),
		.IN_PKT_BURSTWRAP_L            (124),
		.IN_PKT_BURST_SIZE_H           (134),
		.IN_PKT_BURST_SIZE_L           (132),
		.IN_PKT_RESPONSE_STATUS_H      (155),
		.IN_PKT_RESPONSE_STATUS_L      (154),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (136),
		.IN_PKT_BURST_TYPE_L           (135),
		.IN_PKT_ORI_BURST_SIZE_L       (156),
		.IN_PKT_ORI_BURST_SIZE_H       (158),
		.IN_ST_DATA_W                  (159),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (339),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (350),
		.OUT_PKT_BURST_SIZE_L          (348),
		.OUT_PKT_RESPONSE_STATUS_H     (371),
		.OUT_PKT_RESPONSE_STATUS_L     (370),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (352),
		.OUT_PKT_BURST_TYPE_L          (351),
		.OUT_PKT_ORI_BURST_SIZE_L      (372),
		.OUT_PKT_ORI_BURST_SIZE_H      (374),
		.OUT_ST_DATA_W                 (375),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ram_access_0_altera_axi4_master_wr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                          //       clk.clk
		.reset                (ram_access_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (router_src_valid),                                                       //      sink.valid
		.in_channel           (router_src_channel),                                                     //          .channel
		.in_startofpacket     (router_src_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (router_src_endofpacket),                                                 //          .endofpacket
		.in_ready             (router_src_ready),                                                       //          .ready
		.in_data              (router_src_data),                                                        //          .data
		.out_endofpacket      (ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ram_access_0_altera_axi4_master_wr_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (123),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (131),
		.IN_PKT_BURSTWRAP_L            (124),
		.IN_PKT_BURST_SIZE_H           (134),
		.IN_PKT_BURST_SIZE_L           (132),
		.IN_PKT_RESPONSE_STATUS_H      (155),
		.IN_PKT_RESPONSE_STATUS_L      (154),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (136),
		.IN_PKT_BURST_TYPE_L           (135),
		.IN_PKT_ORI_BURST_SIZE_L       (156),
		.IN_PKT_ORI_BURST_SIZE_H       (158),
		.IN_ST_DATA_W                  (159),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (339),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (350),
		.OUT_PKT_BURST_SIZE_L          (348),
		.OUT_PKT_RESPONSE_STATUS_H     (371),
		.OUT_PKT_RESPONSE_STATUS_L     (370),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (352),
		.OUT_PKT_BURST_TYPE_L          (351),
		.OUT_PKT_ORI_BURST_SIZE_L      (372),
		.OUT_PKT_ORI_BURST_SIZE_H      (374),
		.OUT_ST_DATA_W                 (375),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) ram_access_0_altera_axi4_master_rd_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                          //       clk.clk
		.reset                (ram_access_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (router_001_src_valid),                                                   //      sink.valid
		.in_channel           (router_001_src_channel),                                                 //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                             //          .endofpacket
		.in_ready             (router_001_src_ready),                                                   //          .ready
		.in_data              (router_001_src_data),                                                    //          .data
		.out_endofpacket      (ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ram_access_0_altera_axi4_master_rd_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (87),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (95),
		.IN_PKT_BURSTWRAP_L            (88),
		.IN_PKT_BURST_SIZE_H           (98),
		.IN_PKT_BURST_SIZE_L           (96),
		.IN_PKT_RESPONSE_STATUS_H      (119),
		.IN_PKT_RESPONSE_STATUS_L      (118),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (100),
		.IN_PKT_BURST_TYPE_L           (99),
		.IN_PKT_ORI_BURST_SIZE_L       (120),
		.IN_PKT_ORI_BURST_SIZE_H       (122),
		.IN_ST_DATA_W                  (123),
		.OUT_PKT_ADDR_H                (319),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (339),
		.OUT_PKT_BYTE_CNT_L            (326),
		.OUT_PKT_TRANS_COMPRESSED_READ (320),
		.OUT_PKT_BURST_SIZE_H          (350),
		.OUT_PKT_BURST_SIZE_L          (348),
		.OUT_PKT_RESPONSE_STATUS_H     (371),
		.OUT_PKT_RESPONSE_STATUS_L     (370),
		.OUT_PKT_TRANS_EXCLUSIVE       (325),
		.OUT_PKT_BURST_TYPE_H          (352),
		.OUT_PKT_BURST_TYPE_L          (351),
		.OUT_PKT_ORI_BURST_SIZE_L      (372),
		.OUT_PKT_ORI_BURST_SIZE_H      (374),
		.OUT_ST_DATA_W                 (375),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) f2sdram_only_master_master_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                  //       clk.clk
		.reset                (ram_access_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (router_002_src_valid),                                           //      sink.valid
		.in_channel           (router_002_src_channel),                                         //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                     //          .endofpacket
		.in_ready             (router_002_src_ready),                                           //          .ready
		.in_data              (router_002_src_data),                                            //          .data
		.out_endofpacket      (f2sdram_only_master_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (f2sdram_only_master_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (f2sdram_only_master_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (f2sdram_only_master_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (f2sdram_only_master_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (f2sdram_only_master_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                                      // in_clk_0.clk
		.in_rst_0_reset (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (hps_0_f2h_sdram0_data_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                      //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                      //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                       //         .error
	);

endmodule
