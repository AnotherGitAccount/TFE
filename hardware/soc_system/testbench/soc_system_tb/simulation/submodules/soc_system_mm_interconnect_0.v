// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.0 211

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		output wire [7:0]  hps_0_f2h_axi_slave_awid,                                         //                                        hps_0_f2h_axi_slave.awid
		output wire [31:0] hps_0_f2h_axi_slave_awaddr,                                       //                                                           .awaddr
		output wire [3:0]  hps_0_f2h_axi_slave_awlen,                                        //                                                           .awlen
		output wire [2:0]  hps_0_f2h_axi_slave_awsize,                                       //                                                           .awsize
		output wire [1:0]  hps_0_f2h_axi_slave_awburst,                                      //                                                           .awburst
		output wire [1:0]  hps_0_f2h_axi_slave_awlock,                                       //                                                           .awlock
		output wire [3:0]  hps_0_f2h_axi_slave_awcache,                                      //                                                           .awcache
		output wire [2:0]  hps_0_f2h_axi_slave_awprot,                                       //                                                           .awprot
		output wire [4:0]  hps_0_f2h_axi_slave_awuser,                                       //                                                           .awuser
		output wire        hps_0_f2h_axi_slave_awvalid,                                      //                                                           .awvalid
		input  wire        hps_0_f2h_axi_slave_awready,                                      //                                                           .awready
		output wire [7:0]  hps_0_f2h_axi_slave_wid,                                          //                                                           .wid
		output wire [63:0] hps_0_f2h_axi_slave_wdata,                                        //                                                           .wdata
		output wire [7:0]  hps_0_f2h_axi_slave_wstrb,                                        //                                                           .wstrb
		output wire        hps_0_f2h_axi_slave_wlast,                                        //                                                           .wlast
		output wire        hps_0_f2h_axi_slave_wvalid,                                       //                                                           .wvalid
		input  wire        hps_0_f2h_axi_slave_wready,                                       //                                                           .wready
		input  wire [7:0]  hps_0_f2h_axi_slave_bid,                                          //                                                           .bid
		input  wire [1:0]  hps_0_f2h_axi_slave_bresp,                                        //                                                           .bresp
		input  wire        hps_0_f2h_axi_slave_bvalid,                                       //                                                           .bvalid
		output wire        hps_0_f2h_axi_slave_bready,                                       //                                                           .bready
		output wire [7:0]  hps_0_f2h_axi_slave_arid,                                         //                                                           .arid
		output wire [31:0] hps_0_f2h_axi_slave_araddr,                                       //                                                           .araddr
		output wire [3:0]  hps_0_f2h_axi_slave_arlen,                                        //                                                           .arlen
		output wire [2:0]  hps_0_f2h_axi_slave_arsize,                                       //                                                           .arsize
		output wire [1:0]  hps_0_f2h_axi_slave_arburst,                                      //                                                           .arburst
		output wire [1:0]  hps_0_f2h_axi_slave_arlock,                                       //                                                           .arlock
		output wire [3:0]  hps_0_f2h_axi_slave_arcache,                                      //                                                           .arcache
		output wire [2:0]  hps_0_f2h_axi_slave_arprot,                                       //                                                           .arprot
		output wire [4:0]  hps_0_f2h_axi_slave_aruser,                                       //                                                           .aruser
		output wire        hps_0_f2h_axi_slave_arvalid,                                      //                                                           .arvalid
		input  wire        hps_0_f2h_axi_slave_arready,                                      //                                                           .arready
		input  wire [7:0]  hps_0_f2h_axi_slave_rid,                                          //                                                           .rid
		input  wire [63:0] hps_0_f2h_axi_slave_rdata,                                        //                                                           .rdata
		input  wire [1:0]  hps_0_f2h_axi_slave_rresp,                                        //                                                           .rresp
		input  wire        hps_0_f2h_axi_slave_rlast,                                        //                                                           .rlast
		input  wire        hps_0_f2h_axi_slave_rvalid,                                       //                                                           .rvalid
		output wire        hps_0_f2h_axi_slave_rready,                                       //                                                           .rready
		input  wire [31:0] ram_access_0_altera_axi4_master_awaddr,                           //                            ram_access_0_altera_axi4_master.awaddr
		input  wire [3:0]  ram_access_0_altera_axi4_master_awcache,                          //                                                           .awcache
		input  wire [2:0]  ram_access_0_altera_axi4_master_awprot,                           //                                                           .awprot
		input  wire [0:0]  ram_access_0_altera_axi4_master_awuser,                           //                                                           .awuser
		input  wire        ram_access_0_altera_axi4_master_awvalid,                          //                                                           .awvalid
		output wire        ram_access_0_altera_axi4_master_awready,                          //                                                           .awready
		input  wire [63:0] ram_access_0_altera_axi4_master_wdata,                            //                                                           .wdata
		input  wire        ram_access_0_altera_axi4_master_wlast,                            //                                                           .wlast
		input  wire        ram_access_0_altera_axi4_master_wvalid,                           //                                                           .wvalid
		output wire        ram_access_0_altera_axi4_master_wready,                           //                                                           .wready
		output wire        ram_access_0_altera_axi4_master_bvalid,                           //                                                           .bvalid
		input  wire        ram_access_0_altera_axi4_master_bready,                           //                                                           .bready
		input  wire [31:0] ram_access_0_altera_axi4_master_araddr,                           //                                                           .araddr
		input  wire [3:0]  ram_access_0_altera_axi4_master_arcache,                          //                                                           .arcache
		input  wire [2:0]  ram_access_0_altera_axi4_master_arprot,                           //                                                           .arprot
		input  wire [0:0]  ram_access_0_altera_axi4_master_aruser,                           //                                                           .aruser
		input  wire        ram_access_0_altera_axi4_master_arvalid,                          //                                                           .arvalid
		output wire        ram_access_0_altera_axi4_master_arready,                          //                                                           .arready
		output wire [63:0] ram_access_0_altera_axi4_master_rdata,                            //                                                           .rdata
		output wire        ram_access_0_altera_axi4_master_rvalid,                           //                                                           .rvalid
		input  wire        ram_access_0_altera_axi4_master_rready,                           //                                                           .rready
		input  wire        clk_0_clk_clk,                                                    //                                                  clk_0_clk.clk
		input  wire        hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset, // hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset.reset
		input  wire        hps_only_master_clk_reset_reset_bridge_in_reset_reset,            //            hps_only_master_clk_reset_reset_bridge_in_reset.reset
		input  wire        ram_access_0_reset_reset_bridge_in_reset_reset,                   //                   ram_access_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] hps_only_master_master_address,                                   //                                     hps_only_master_master.address
		output wire        hps_only_master_master_waitrequest,                               //                                                           .waitrequest
		input  wire [3:0]  hps_only_master_master_byteenable,                                //                                                           .byteenable
		input  wire        hps_only_master_master_read,                                      //                                                           .read
		output wire [31:0] hps_only_master_master_readdata,                                  //                                                           .readdata
		output wire        hps_only_master_master_readdatavalid,                             //                                                           .readdatavalid
		input  wire        hps_only_master_master_write,                                     //                                                           .write
		input  wire [31:0] hps_only_master_master_writedata                                  //                                                           .writedata
	);

	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_ruser;                       // ram_access_0_altera_axi4_master_agent:ruser -> ram_access_0_altera_axi4_master_translator:m0_ruser
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_wuser;                       // ram_access_0_altera_axi4_master_translator:m0_wuser -> ram_access_0_altera_axi4_master_agent:wuser
	wire    [1:0] ram_access_0_altera_axi4_master_translator_m0_awburst;                     // ram_access_0_altera_axi4_master_translator:m0_awburst -> ram_access_0_altera_axi4_master_agent:awburst
	wire    [3:0] ram_access_0_altera_axi4_master_translator_m0_arregion;                    // ram_access_0_altera_axi4_master_translator:m0_arregion -> ram_access_0_altera_axi4_master_agent:arregion
	wire    [4:0] ram_access_0_altera_axi4_master_translator_m0_awuser;                      // ram_access_0_altera_axi4_master_translator:m0_awuser -> ram_access_0_altera_axi4_master_agent:awuser
	wire    [7:0] ram_access_0_altera_axi4_master_translator_m0_arlen;                       // ram_access_0_altera_axi4_master_translator:m0_arlen -> ram_access_0_altera_axi4_master_agent:arlen
	wire    [3:0] ram_access_0_altera_axi4_master_translator_m0_arqos;                       // ram_access_0_altera_axi4_master_translator:m0_arqos -> ram_access_0_altera_axi4_master_agent:arqos
	wire    [7:0] ram_access_0_altera_axi4_master_translator_m0_wstrb;                       // ram_access_0_altera_axi4_master_translator:m0_wstrb -> ram_access_0_altera_axi4_master_agent:wstrb
	wire          ram_access_0_altera_axi4_master_translator_m0_wready;                      // ram_access_0_altera_axi4_master_agent:wready -> ram_access_0_altera_axi4_master_translator:m0_wready
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_rid;                         // ram_access_0_altera_axi4_master_agent:rid -> ram_access_0_altera_axi4_master_translator:m0_rid
	wire          ram_access_0_altera_axi4_master_translator_m0_rready;                      // ram_access_0_altera_axi4_master_translator:m0_rready -> ram_access_0_altera_axi4_master_agent:rready
	wire    [7:0] ram_access_0_altera_axi4_master_translator_m0_awlen;                       // ram_access_0_altera_axi4_master_translator:m0_awlen -> ram_access_0_altera_axi4_master_agent:awlen
	wire    [3:0] ram_access_0_altera_axi4_master_translator_m0_awqos;                       // ram_access_0_altera_axi4_master_translator:m0_awqos -> ram_access_0_altera_axi4_master_agent:awqos
	wire    [3:0] ram_access_0_altera_axi4_master_translator_m0_arcache;                     // ram_access_0_altera_axi4_master_translator:m0_arcache -> ram_access_0_altera_axi4_master_agent:arcache
	wire          ram_access_0_altera_axi4_master_translator_m0_wvalid;                      // ram_access_0_altera_axi4_master_translator:m0_wvalid -> ram_access_0_altera_axi4_master_agent:wvalid
	wire   [31:0] ram_access_0_altera_axi4_master_translator_m0_araddr;                      // ram_access_0_altera_axi4_master_translator:m0_araddr -> ram_access_0_altera_axi4_master_agent:araddr
	wire    [2:0] ram_access_0_altera_axi4_master_translator_m0_arprot;                      // ram_access_0_altera_axi4_master_translator:m0_arprot -> ram_access_0_altera_axi4_master_agent:arprot
	wire    [2:0] ram_access_0_altera_axi4_master_translator_m0_awprot;                      // ram_access_0_altera_axi4_master_translator:m0_awprot -> ram_access_0_altera_axi4_master_agent:awprot
	wire   [63:0] ram_access_0_altera_axi4_master_translator_m0_wdata;                       // ram_access_0_altera_axi4_master_translator:m0_wdata -> ram_access_0_altera_axi4_master_agent:wdata
	wire          ram_access_0_altera_axi4_master_translator_m0_arvalid;                     // ram_access_0_altera_axi4_master_translator:m0_arvalid -> ram_access_0_altera_axi4_master_agent:arvalid
	wire    [3:0] ram_access_0_altera_axi4_master_translator_m0_awcache;                     // ram_access_0_altera_axi4_master_translator:m0_awcache -> ram_access_0_altera_axi4_master_agent:awcache
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_arid;                        // ram_access_0_altera_axi4_master_translator:m0_arid -> ram_access_0_altera_axi4_master_agent:arid
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_arlock;                      // ram_access_0_altera_axi4_master_translator:m0_arlock -> ram_access_0_altera_axi4_master_agent:arlock
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_awlock;                      // ram_access_0_altera_axi4_master_translator:m0_awlock -> ram_access_0_altera_axi4_master_agent:awlock
	wire   [31:0] ram_access_0_altera_axi4_master_translator_m0_awaddr;                      // ram_access_0_altera_axi4_master_translator:m0_awaddr -> ram_access_0_altera_axi4_master_agent:awaddr
	wire    [1:0] ram_access_0_altera_axi4_master_translator_m0_bresp;                       // ram_access_0_altera_axi4_master_agent:bresp -> ram_access_0_altera_axi4_master_translator:m0_bresp
	wire          ram_access_0_altera_axi4_master_translator_m0_arready;                     // ram_access_0_altera_axi4_master_agent:arready -> ram_access_0_altera_axi4_master_translator:m0_arready
	wire   [63:0] ram_access_0_altera_axi4_master_translator_m0_rdata;                       // ram_access_0_altera_axi4_master_agent:rdata -> ram_access_0_altera_axi4_master_translator:m0_rdata
	wire          ram_access_0_altera_axi4_master_translator_m0_awready;                     // ram_access_0_altera_axi4_master_agent:awready -> ram_access_0_altera_axi4_master_translator:m0_awready
	wire    [1:0] ram_access_0_altera_axi4_master_translator_m0_arburst;                     // ram_access_0_altera_axi4_master_translator:m0_arburst -> ram_access_0_altera_axi4_master_agent:arburst
	wire    [2:0] ram_access_0_altera_axi4_master_translator_m0_arsize;                      // ram_access_0_altera_axi4_master_translator:m0_arsize -> ram_access_0_altera_axi4_master_agent:arsize
	wire          ram_access_0_altera_axi4_master_translator_m0_bready;                      // ram_access_0_altera_axi4_master_translator:m0_bready -> ram_access_0_altera_axi4_master_agent:bready
	wire          ram_access_0_altera_axi4_master_translator_m0_rlast;                       // ram_access_0_altera_axi4_master_agent:rlast -> ram_access_0_altera_axi4_master_translator:m0_rlast
	wire          ram_access_0_altera_axi4_master_translator_m0_wlast;                       // ram_access_0_altera_axi4_master_translator:m0_wlast -> ram_access_0_altera_axi4_master_agent:wlast
	wire    [3:0] ram_access_0_altera_axi4_master_translator_m0_awregion;                    // ram_access_0_altera_axi4_master_translator:m0_awregion -> ram_access_0_altera_axi4_master_agent:awregion
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_buser;                       // ram_access_0_altera_axi4_master_agent:buser -> ram_access_0_altera_axi4_master_translator:m0_buser
	wire    [1:0] ram_access_0_altera_axi4_master_translator_m0_rresp;                       // ram_access_0_altera_axi4_master_agent:rresp -> ram_access_0_altera_axi4_master_translator:m0_rresp
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_awid;                        // ram_access_0_altera_axi4_master_translator:m0_awid -> ram_access_0_altera_axi4_master_agent:awid
	wire    [0:0] ram_access_0_altera_axi4_master_translator_m0_bid;                         // ram_access_0_altera_axi4_master_agent:bid -> ram_access_0_altera_axi4_master_translator:m0_bid
	wire          ram_access_0_altera_axi4_master_translator_m0_bvalid;                      // ram_access_0_altera_axi4_master_agent:bvalid -> ram_access_0_altera_axi4_master_translator:m0_bvalid
	wire    [2:0] ram_access_0_altera_axi4_master_translator_m0_awsize;                      // ram_access_0_altera_axi4_master_translator:m0_awsize -> ram_access_0_altera_axi4_master_agent:awsize
	wire          ram_access_0_altera_axi4_master_translator_m0_awvalid;                     // ram_access_0_altera_axi4_master_translator:m0_awvalid -> ram_access_0_altera_axi4_master_agent:awvalid
	wire    [4:0] ram_access_0_altera_axi4_master_translator_m0_aruser;                      // ram_access_0_altera_axi4_master_translator:m0_aruser -> ram_access_0_altera_axi4_master_agent:aruser
	wire          ram_access_0_altera_axi4_master_translator_m0_rvalid;                      // ram_access_0_altera_axi4_master_agent:rvalid -> ram_access_0_altera_axi4_master_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> ram_access_0_altera_axi4_master_agent:write_rp_valid
	wire  [160:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> ram_access_0_altera_axi4_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                         // ram_access_0_altera_axi4_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> ram_access_0_altera_axi4_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> ram_access_0_altera_axi4_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> ram_access_0_altera_axi4_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                     // rsp_mux_001:src_valid -> ram_access_0_altera_axi4_master_agent:read_rp_valid
	wire  [160:0] rsp_mux_001_src_data;                                                      // rsp_mux_001:src_data -> ram_access_0_altera_axi4_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                                     // ram_access_0_altera_axi4_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                                   // rsp_mux_001:src_channel -> ram_access_0_altera_axi4_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                             // rsp_mux_001:src_startofpacket -> ram_access_0_altera_axi4_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                               // rsp_mux_001:src_endofpacket -> ram_access_0_altera_axi4_master_agent:read_rp_endofpacket
	wire          hps_only_master_master_translator_avalon_universal_master_0_waitrequest;   // hps_only_master_master_agent:av_waitrequest -> hps_only_master_master_translator:uav_waitrequest
	wire   [31:0] hps_only_master_master_translator_avalon_universal_master_0_readdata;      // hps_only_master_master_agent:av_readdata -> hps_only_master_master_translator:uav_readdata
	wire          hps_only_master_master_translator_avalon_universal_master_0_debugaccess;   // hps_only_master_master_translator:uav_debugaccess -> hps_only_master_master_agent:av_debugaccess
	wire   [31:0] hps_only_master_master_translator_avalon_universal_master_0_address;       // hps_only_master_master_translator:uav_address -> hps_only_master_master_agent:av_address
	wire          hps_only_master_master_translator_avalon_universal_master_0_read;          // hps_only_master_master_translator:uav_read -> hps_only_master_master_agent:av_read
	wire    [3:0] hps_only_master_master_translator_avalon_universal_master_0_byteenable;    // hps_only_master_master_translator:uav_byteenable -> hps_only_master_master_agent:av_byteenable
	wire          hps_only_master_master_translator_avalon_universal_master_0_readdatavalid; // hps_only_master_master_agent:av_readdatavalid -> hps_only_master_master_translator:uav_readdatavalid
	wire          hps_only_master_master_translator_avalon_universal_master_0_lock;          // hps_only_master_master_translator:uav_lock -> hps_only_master_master_agent:av_lock
	wire          hps_only_master_master_translator_avalon_universal_master_0_write;         // hps_only_master_master_translator:uav_write -> hps_only_master_master_agent:av_write
	wire   [31:0] hps_only_master_master_translator_avalon_universal_master_0_writedata;     // hps_only_master_master_translator:uav_writedata -> hps_only_master_master_agent:av_writedata
	wire    [2:0] hps_only_master_master_translator_avalon_universal_master_0_burstcount;    // hps_only_master_master_translator:uav_burstcount -> hps_only_master_master_agent:av_burstcount
	wire          cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> hps_0_f2h_axi_slave_agent:write_cp_valid
	wire  [160:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> hps_0_f2h_axi_slave_agent:write_cp_data
	wire          cmd_mux_src_ready;                                                         // hps_0_f2h_axi_slave_agent:write_cp_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> hps_0_f2h_axi_slave_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> hps_0_f2h_axi_slave_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> hps_0_f2h_axi_slave_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                     // cmd_mux_001:src_valid -> hps_0_f2h_axi_slave_agent:read_cp_valid
	wire  [160:0] cmd_mux_001_src_data;                                                      // cmd_mux_001:src_data -> hps_0_f2h_axi_slave_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                                     // hps_0_f2h_axi_slave_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire    [2:0] cmd_mux_001_src_channel;                                                   // cmd_mux_001:src_channel -> hps_0_f2h_axi_slave_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                             // cmd_mux_001:src_startofpacket -> hps_0_f2h_axi_slave_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                               // cmd_mux_001:src_endofpacket -> hps_0_f2h_axi_slave_agent:read_cp_endofpacket
	wire          ram_access_0_altera_axi4_master_agent_write_cp_valid;                      // ram_access_0_altera_axi4_master_agent:write_cp_valid -> router:sink_valid
	wire  [160:0] ram_access_0_altera_axi4_master_agent_write_cp_data;                       // ram_access_0_altera_axi4_master_agent:write_cp_data -> router:sink_data
	wire          ram_access_0_altera_axi4_master_agent_write_cp_ready;                      // router:sink_ready -> ram_access_0_altera_axi4_master_agent:write_cp_ready
	wire          ram_access_0_altera_axi4_master_agent_write_cp_startofpacket;              // ram_access_0_altera_axi4_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          ram_access_0_altera_axi4_master_agent_write_cp_endofpacket;                // ram_access_0_altera_axi4_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                          // router:src_valid -> cmd_demux:sink_valid
	wire  [160:0] router_src_data;                                                           // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                          // cmd_demux:sink_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                        // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                  // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                    // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          ram_access_0_altera_axi4_master_agent_read_cp_valid;                       // ram_access_0_altera_axi4_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [160:0] ram_access_0_altera_axi4_master_agent_read_cp_data;                        // ram_access_0_altera_axi4_master_agent:read_cp_data -> router_001:sink_data
	wire          ram_access_0_altera_axi4_master_agent_read_cp_ready;                       // router_001:sink_ready -> ram_access_0_altera_axi4_master_agent:read_cp_ready
	wire          ram_access_0_altera_axi4_master_agent_read_cp_startofpacket;               // ram_access_0_altera_axi4_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          ram_access_0_altera_axi4_master_agent_read_cp_endofpacket;                 // ram_access_0_altera_axi4_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                      // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [160:0] router_001_src_data;                                                       // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                      // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                                    // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                              // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          hps_only_master_master_agent_cp_valid;                                     // hps_only_master_master_agent:cp_valid -> router_002:sink_valid
	wire  [124:0] hps_only_master_master_agent_cp_data;                                      // hps_only_master_master_agent:cp_data -> router_002:sink_data
	wire          hps_only_master_master_agent_cp_ready;                                     // router_002:sink_ready -> hps_only_master_master_agent:cp_ready
	wire          hps_only_master_master_agent_cp_startofpacket;                             // hps_only_master_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          hps_only_master_master_agent_cp_endofpacket;                               // hps_only_master_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          hps_0_f2h_axi_slave_agent_write_rp_valid;                                  // hps_0_f2h_axi_slave_agent:write_rp_valid -> router_003:sink_valid
	wire  [160:0] hps_0_f2h_axi_slave_agent_write_rp_data;                                   // hps_0_f2h_axi_slave_agent:write_rp_data -> router_003:sink_data
	wire          hps_0_f2h_axi_slave_agent_write_rp_ready;                                  // router_003:sink_ready -> hps_0_f2h_axi_slave_agent:write_rp_ready
	wire          hps_0_f2h_axi_slave_agent_write_rp_startofpacket;                          // hps_0_f2h_axi_slave_agent:write_rp_startofpacket -> router_003:sink_startofpacket
	wire          hps_0_f2h_axi_slave_agent_write_rp_endofpacket;                            // hps_0_f2h_axi_slave_agent:write_rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                      // router_003:src_valid -> rsp_demux:sink_valid
	wire  [160:0] router_003_src_data;                                                       // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                      // rsp_demux:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                                    // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                              // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          hps_0_f2h_axi_slave_agent_read_rp_valid;                                   // hps_0_f2h_axi_slave_agent:read_rp_valid -> router_004:sink_valid
	wire  [160:0] hps_0_f2h_axi_slave_agent_read_rp_data;                                    // hps_0_f2h_axi_slave_agent:read_rp_data -> router_004:sink_data
	wire          hps_0_f2h_axi_slave_agent_read_rp_ready;                                   // router_004:sink_ready -> hps_0_f2h_axi_slave_agent:read_rp_ready
	wire          hps_0_f2h_axi_slave_agent_read_rp_startofpacket;                           // hps_0_f2h_axi_slave_agent:read_rp_startofpacket -> router_004:sink_startofpacket
	wire          hps_0_f2h_axi_slave_agent_read_rp_endofpacket;                             // hps_0_f2h_axi_slave_agent:read_rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                      // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [160:0] router_004_src_data;                                                       // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                      // rsp_demux_001:sink_ready -> router_004:src_ready
	wire    [2:0] router_004_src_channel;                                                    // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                              // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                      // router_002:src_valid -> hps_only_master_master_limiter:cmd_sink_valid
	wire  [124:0] router_002_src_data;                                                       // router_002:src_data -> hps_only_master_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                      // hps_only_master_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                                    // router_002:src_channel -> hps_only_master_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                              // router_002:src_startofpacket -> hps_only_master_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                // router_002:src_endofpacket -> hps_only_master_master_limiter:cmd_sink_endofpacket
	wire          hps_only_master_master_limiter_rsp_src_valid;                              // hps_only_master_master_limiter:rsp_src_valid -> hps_only_master_master_agent:rp_valid
	wire  [124:0] hps_only_master_master_limiter_rsp_src_data;                               // hps_only_master_master_limiter:rsp_src_data -> hps_only_master_master_agent:rp_data
	wire          hps_only_master_master_limiter_rsp_src_ready;                              // hps_only_master_master_agent:rp_ready -> hps_only_master_master_limiter:rsp_src_ready
	wire    [2:0] hps_only_master_master_limiter_rsp_src_channel;                            // hps_only_master_master_limiter:rsp_src_channel -> hps_only_master_master_agent:rp_channel
	wire          hps_only_master_master_limiter_rsp_src_startofpacket;                      // hps_only_master_master_limiter:rsp_src_startofpacket -> hps_only_master_master_agent:rp_startofpacket
	wire          hps_only_master_master_limiter_rsp_src_endofpacket;                        // hps_only_master_master_limiter:rsp_src_endofpacket -> hps_only_master_master_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [160:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                  // cmd_demux_001:src0_valid -> cmd_mux_001:sink0_valid
	wire  [160:0] cmd_demux_001_src0_data;                                                   // cmd_demux_001:src0_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_001_src0_ready;                                                  // cmd_mux_001:sink0_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                                // cmd_demux_001:src0_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src0_startofpacket;                                          // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                            // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                  // cmd_demux_002:src0_valid -> cmd_mux:sink1_valid
	wire  [160:0] cmd_demux_002_src0_data;                                                   // cmd_demux_002:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_002_src0_ready;                                                  // cmd_mux:sink1_ready -> cmd_demux_002:src0_ready
	wire    [2:0] cmd_demux_002_src0_channel;                                                // cmd_demux_002:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_002_src0_startofpacket;                                          // cmd_demux_002:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                            // cmd_demux_002:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                  // cmd_demux_002:src1_valid -> cmd_mux_001:sink1_valid
	wire  [160:0] cmd_demux_002_src1_data;                                                   // cmd_demux_002:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_002_src1_ready;                                                  // cmd_mux_001:sink1_ready -> cmd_demux_002:src1_ready
	wire    [2:0] cmd_demux_002_src1_channel;                                                // cmd_demux_002:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_002_src1_startofpacket;                                          // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                            // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [160:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                      // rsp_demux:src1_valid -> rsp_mux_002:sink0_valid
	wire  [160:0] rsp_demux_src1_data;                                                       // rsp_demux:src1_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src1_ready;                                                      // rsp_mux_002:sink0_ready -> rsp_demux:src1_ready
	wire    [2:0] rsp_demux_src1_channel;                                                    // rsp_demux:src1_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                              // rsp_demux:src1_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                // rsp_demux:src1_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                  // rsp_demux_001:src0_valid -> rsp_mux_001:sink0_valid
	wire  [160:0] rsp_demux_001_src0_data;                                                   // rsp_demux_001:src0_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_001_src0_ready;                                                  // rsp_mux_001:sink0_ready -> rsp_demux_001:src0_ready
	wire    [2:0] rsp_demux_001_src0_channel;                                                // rsp_demux_001:src0_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_001_src0_startofpacket;                                          // rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                            // rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                  // rsp_demux_001:src1_valid -> rsp_mux_002:sink1_valid
	wire  [160:0] rsp_demux_001_src1_data;                                                   // rsp_demux_001:src1_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_001_src1_ready;                                                  // rsp_mux_002:sink1_ready -> rsp_demux_001:src1_ready
	wire    [2:0] rsp_demux_001_src1_channel;                                                // rsp_demux_001:src1_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                          // rsp_demux_001:src1_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                            // rsp_demux_001:src1_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire    [0:0] hps_only_master_master_limiter_cmd_src_valid;                              // hps_only_master_master_limiter:cmd_src_valid -> hps_only_master_master_cmd_width_adapter:in_valid
	wire  [124:0] hps_only_master_master_limiter_cmd_src_data;                               // hps_only_master_master_limiter:cmd_src_data -> hps_only_master_master_cmd_width_adapter:in_data
	wire          hps_only_master_master_limiter_cmd_src_ready;                              // hps_only_master_master_cmd_width_adapter:in_ready -> hps_only_master_master_limiter:cmd_src_ready
	wire    [2:0] hps_only_master_master_limiter_cmd_src_channel;                            // hps_only_master_master_limiter:cmd_src_channel -> hps_only_master_master_cmd_width_adapter:in_channel
	wire          hps_only_master_master_limiter_cmd_src_startofpacket;                      // hps_only_master_master_limiter:cmd_src_startofpacket -> hps_only_master_master_cmd_width_adapter:in_startofpacket
	wire          hps_only_master_master_limiter_cmd_src_endofpacket;                        // hps_only_master_master_limiter:cmd_src_endofpacket -> hps_only_master_master_cmd_width_adapter:in_endofpacket
	wire          hps_only_master_master_cmd_width_adapter_src_valid;                        // hps_only_master_master_cmd_width_adapter:out_valid -> cmd_demux_002:sink_valid
	wire  [160:0] hps_only_master_master_cmd_width_adapter_src_data;                         // hps_only_master_master_cmd_width_adapter:out_data -> cmd_demux_002:sink_data
	wire          hps_only_master_master_cmd_width_adapter_src_ready;                        // cmd_demux_002:sink_ready -> hps_only_master_master_cmd_width_adapter:out_ready
	wire    [2:0] hps_only_master_master_cmd_width_adapter_src_channel;                      // hps_only_master_master_cmd_width_adapter:out_channel -> cmd_demux_002:sink_channel
	wire          hps_only_master_master_cmd_width_adapter_src_startofpacket;                // hps_only_master_master_cmd_width_adapter:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          hps_only_master_master_cmd_width_adapter_src_endofpacket;                  // hps_only_master_master_cmd_width_adapter:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                     // rsp_mux_002:src_valid -> hps_only_master_master_rsp_width_adapter:in_valid
	wire  [160:0] rsp_mux_002_src_data;                                                      // rsp_mux_002:src_data -> hps_only_master_master_rsp_width_adapter:in_data
	wire          rsp_mux_002_src_ready;                                                     // hps_only_master_master_rsp_width_adapter:in_ready -> rsp_mux_002:src_ready
	wire    [2:0] rsp_mux_002_src_channel;                                                   // rsp_mux_002:src_channel -> hps_only_master_master_rsp_width_adapter:in_channel
	wire          rsp_mux_002_src_startofpacket;                                             // rsp_mux_002:src_startofpacket -> hps_only_master_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                               // rsp_mux_002:src_endofpacket -> hps_only_master_master_rsp_width_adapter:in_endofpacket
	wire          hps_only_master_master_rsp_width_adapter_src_valid;                        // hps_only_master_master_rsp_width_adapter:out_valid -> hps_only_master_master_limiter:rsp_sink_valid
	wire  [124:0] hps_only_master_master_rsp_width_adapter_src_data;                         // hps_only_master_master_rsp_width_adapter:out_data -> hps_only_master_master_limiter:rsp_sink_data
	wire          hps_only_master_master_rsp_width_adapter_src_ready;                        // hps_only_master_master_limiter:rsp_sink_ready -> hps_only_master_master_rsp_width_adapter:out_ready
	wire    [2:0] hps_only_master_master_rsp_width_adapter_src_channel;                      // hps_only_master_master_rsp_width_adapter:out_channel -> hps_only_master_master_limiter:rsp_sink_channel
	wire          hps_only_master_master_rsp_width_adapter_src_startofpacket;                // hps_only_master_master_rsp_width_adapter:out_startofpacket -> hps_only_master_master_limiter:rsp_sink_startofpacket
	wire          hps_only_master_master_rsp_width_adapter_src_endofpacket;                  // hps_only_master_master_rsp_width_adapter:out_endofpacket -> hps_only_master_master_limiter:rsp_sink_endofpacket

	altera_merlin_axi_translator #(
		.USE_S0_AWID                       (0),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (0),
		.USE_S0_AWSIZE                     (0),
		.USE_S0_AWBURST                    (0),
		.USE_S0_AWLOCK                     (0),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (0),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (0),
		.USE_S0_BRESP                      (0),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (0),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (0),
		.USE_S0_ARSIZE                     (0),
		.USE_S0_ARBURST                    (0),
		.USE_S0_ARLOCK                     (0),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (0),
		.USE_S0_RRESP                      (0),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (0),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (64),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (5),
		.M0_READ_ADDR_USER_WIDTH           (5),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (1),
		.USE_S0_ARUSER                     (1),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4")
	) ram_access_0_altera_axi4_master_translator (
		.aclk        (clk_0_clk_clk),                                          //       clk.clk
		.aresetn     (~ram_access_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset_n
		.m0_awid     (ram_access_0_altera_axi4_master_translator_m0_awid),     //        m0.awid
		.m0_awaddr   (ram_access_0_altera_axi4_master_translator_m0_awaddr),   //          .awaddr
		.m0_awlen    (ram_access_0_altera_axi4_master_translator_m0_awlen),    //          .awlen
		.m0_awsize   (ram_access_0_altera_axi4_master_translator_m0_awsize),   //          .awsize
		.m0_awburst  (ram_access_0_altera_axi4_master_translator_m0_awburst),  //          .awburst
		.m0_awlock   (ram_access_0_altera_axi4_master_translator_m0_awlock),   //          .awlock
		.m0_awcache  (ram_access_0_altera_axi4_master_translator_m0_awcache),  //          .awcache
		.m0_awprot   (ram_access_0_altera_axi4_master_translator_m0_awprot),   //          .awprot
		.m0_awuser   (ram_access_0_altera_axi4_master_translator_m0_awuser),   //          .awuser
		.m0_awqos    (ram_access_0_altera_axi4_master_translator_m0_awqos),    //          .awqos
		.m0_awregion (ram_access_0_altera_axi4_master_translator_m0_awregion), //          .awregion
		.m0_awvalid  (ram_access_0_altera_axi4_master_translator_m0_awvalid),  //          .awvalid
		.m0_awready  (ram_access_0_altera_axi4_master_translator_m0_awready),  //          .awready
		.m0_wdata    (ram_access_0_altera_axi4_master_translator_m0_wdata),    //          .wdata
		.m0_wstrb    (ram_access_0_altera_axi4_master_translator_m0_wstrb),    //          .wstrb
		.m0_wlast    (ram_access_0_altera_axi4_master_translator_m0_wlast),    //          .wlast
		.m0_wvalid   (ram_access_0_altera_axi4_master_translator_m0_wvalid),   //          .wvalid
		.m0_wuser    (ram_access_0_altera_axi4_master_translator_m0_wuser),    //          .wuser
		.m0_wready   (ram_access_0_altera_axi4_master_translator_m0_wready),   //          .wready
		.m0_bid      (ram_access_0_altera_axi4_master_translator_m0_bid),      //          .bid
		.m0_bresp    (ram_access_0_altera_axi4_master_translator_m0_bresp),    //          .bresp
		.m0_buser    (ram_access_0_altera_axi4_master_translator_m0_buser),    //          .buser
		.m0_bvalid   (ram_access_0_altera_axi4_master_translator_m0_bvalid),   //          .bvalid
		.m0_bready   (ram_access_0_altera_axi4_master_translator_m0_bready),   //          .bready
		.m0_arid     (ram_access_0_altera_axi4_master_translator_m0_arid),     //          .arid
		.m0_araddr   (ram_access_0_altera_axi4_master_translator_m0_araddr),   //          .araddr
		.m0_arlen    (ram_access_0_altera_axi4_master_translator_m0_arlen),    //          .arlen
		.m0_arsize   (ram_access_0_altera_axi4_master_translator_m0_arsize),   //          .arsize
		.m0_arburst  (ram_access_0_altera_axi4_master_translator_m0_arburst),  //          .arburst
		.m0_arlock   (ram_access_0_altera_axi4_master_translator_m0_arlock),   //          .arlock
		.m0_arcache  (ram_access_0_altera_axi4_master_translator_m0_arcache),  //          .arcache
		.m0_arprot   (ram_access_0_altera_axi4_master_translator_m0_arprot),   //          .arprot
		.m0_aruser   (ram_access_0_altera_axi4_master_translator_m0_aruser),   //          .aruser
		.m0_arqos    (ram_access_0_altera_axi4_master_translator_m0_arqos),    //          .arqos
		.m0_arregion (ram_access_0_altera_axi4_master_translator_m0_arregion), //          .arregion
		.m0_arvalid  (ram_access_0_altera_axi4_master_translator_m0_arvalid),  //          .arvalid
		.m0_arready  (ram_access_0_altera_axi4_master_translator_m0_arready),  //          .arready
		.m0_rid      (ram_access_0_altera_axi4_master_translator_m0_rid),      //          .rid
		.m0_rdata    (ram_access_0_altera_axi4_master_translator_m0_rdata),    //          .rdata
		.m0_rresp    (ram_access_0_altera_axi4_master_translator_m0_rresp),    //          .rresp
		.m0_rlast    (ram_access_0_altera_axi4_master_translator_m0_rlast),    //          .rlast
		.m0_rvalid   (ram_access_0_altera_axi4_master_translator_m0_rvalid),   //          .rvalid
		.m0_rready   (ram_access_0_altera_axi4_master_translator_m0_rready),   //          .rready
		.m0_ruser    (ram_access_0_altera_axi4_master_translator_m0_ruser),    //          .ruser
		.s0_awaddr   (ram_access_0_altera_axi4_master_awaddr),                 //        s0.awaddr
		.s0_awcache  (ram_access_0_altera_axi4_master_awcache),                //          .awcache
		.s0_awprot   (ram_access_0_altera_axi4_master_awprot),                 //          .awprot
		.s0_awuser   (ram_access_0_altera_axi4_master_awuser),                 //          .awuser
		.s0_awvalid  (ram_access_0_altera_axi4_master_awvalid),                //          .awvalid
		.s0_awready  (ram_access_0_altera_axi4_master_awready),                //          .awready
		.s0_wdata    (ram_access_0_altera_axi4_master_wdata),                  //          .wdata
		.s0_wlast    (ram_access_0_altera_axi4_master_wlast),                  //          .wlast
		.s0_wvalid   (ram_access_0_altera_axi4_master_wvalid),                 //          .wvalid
		.s0_wready   (ram_access_0_altera_axi4_master_wready),                 //          .wready
		.s0_bvalid   (ram_access_0_altera_axi4_master_bvalid),                 //          .bvalid
		.s0_bready   (ram_access_0_altera_axi4_master_bready),                 //          .bready
		.s0_araddr   (ram_access_0_altera_axi4_master_araddr),                 //          .araddr
		.s0_arcache  (ram_access_0_altera_axi4_master_arcache),                //          .arcache
		.s0_arprot   (ram_access_0_altera_axi4_master_arprot),                 //          .arprot
		.s0_aruser   (ram_access_0_altera_axi4_master_aruser),                 //          .aruser
		.s0_arvalid  (ram_access_0_altera_axi4_master_arvalid),                //          .arvalid
		.s0_arready  (ram_access_0_altera_axi4_master_arready),                //          .arready
		.s0_rdata    (ram_access_0_altera_axi4_master_rdata),                  //          .rdata
		.s0_rvalid   (ram_access_0_altera_axi4_master_rvalid),                 //          .rvalid
		.s0_rready   (ram_access_0_altera_axi4_master_rready),                 //          .rready
		.s0_awid     (1'b0),                                                   // (terminated)
		.s0_awlen    (8'b00000000),                                            // (terminated)
		.s0_awsize   (3'b000),                                                 // (terminated)
		.s0_awburst  (2'b00),                                                  // (terminated)
		.s0_awlock   (1'b0),                                                   // (terminated)
		.s0_awqos    (4'b0000),                                                // (terminated)
		.s0_awregion (4'b0000),                                                // (terminated)
		.s0_wstrb    (8'b11111111),                                            // (terminated)
		.s0_wuser    (1'b0),                                                   // (terminated)
		.s0_bid      (),                                                       // (terminated)
		.s0_bresp    (),                                                       // (terminated)
		.s0_buser    (),                                                       // (terminated)
		.s0_arid     (1'b0),                                                   // (terminated)
		.s0_arlen    (8'b00000000),                                            // (terminated)
		.s0_arsize   (3'b000),                                                 // (terminated)
		.s0_arburst  (2'b00),                                                  // (terminated)
		.s0_arlock   (1'b0),                                                   // (terminated)
		.s0_arqos    (4'b0000),                                                // (terminated)
		.s0_arregion (4'b0000),                                                // (terminated)
		.s0_rid      (),                                                       // (terminated)
		.s0_rresp    (),                                                       // (terminated)
		.s0_rlast    (),                                                       // (terminated)
		.s0_ruser    (),                                                       // (terminated)
		.s0_wid      (1'b0),                                                   // (terminated)
		.m0_wid      ()                                                        // (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) hps_only_master_master_translator (
		.clk                    (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                  (ram_access_0_reset_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (hps_only_master_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (hps_only_master_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (hps_only_master_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (hps_only_master_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (hps_only_master_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (hps_only_master_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (hps_only_master_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (hps_only_master_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (hps_only_master_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (hps_only_master_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (hps_only_master_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (hps_only_master_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (hps_only_master_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (hps_only_master_master_byteenable),                                         //                          .byteenable
		.av_read                (hps_only_master_master_read),                                               //                          .read
		.av_readdata            (hps_only_master_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (hps_only_master_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (hps_only_master_master_write),                                              //                          .write
		.av_writedata           (hps_only_master_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (5),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (141),
		.PKT_CACHE_H               (155),
		.PKT_CACHE_L               (152),
		.PKT_ADDR_SIDEBAND_H       (139),
		.PKT_ADDR_SIDEBAND_L       (135),
		.PKT_PROTECTION_H          (151),
		.PKT_PROTECTION_L          (149),
		.PKT_BURST_SIZE_H          (132),
		.PKT_BURST_SIZE_L          (130),
		.PKT_BURST_TYPE_H          (134),
		.PKT_BURST_TYPE_L          (133),
		.PKT_RESPONSE_STATUS_L     (156),
		.PKT_RESPONSE_STATUS_H     (157),
		.PKT_BURSTWRAP_H           (129),
		.PKT_BURSTWRAP_L           (122),
		.PKT_BYTE_CNT_H            (121),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (146),
		.PKT_SRC_ID_L              (146),
		.PKT_DEST_ID_H             (147),
		.PKT_DEST_ID_L             (147),
		.PKT_THREAD_ID_H           (148),
		.PKT_THREAD_ID_L           (148),
		.PKT_QOS_L                 (142),
		.PKT_QOS_H                 (145),
		.PKT_ORI_BURST_SIZE_L      (158),
		.PKT_ORI_BURST_SIZE_H      (160),
		.PKT_DATA_SIDEBAND_H       (140),
		.PKT_DATA_SIDEBAND_L       (140),
		.ST_DATA_W                 (161),
		.ST_CHANNEL_W              (3),
		.ID                        (1)
	) ram_access_0_altera_axi4_master_agent (
		.aclk                   (clk_0_clk_clk),                                                //              clk.clk
		.aresetn                (~ram_access_0_reset_reset_bridge_in_reset_reset),              //        clk_reset.reset_n
		.write_cp_valid         (ram_access_0_altera_axi4_master_agent_write_cp_valid),         //         write_cp.valid
		.write_cp_data          (ram_access_0_altera_axi4_master_agent_write_cp_data),          //                 .data
		.write_cp_startofpacket (ram_access_0_altera_axi4_master_agent_write_cp_startofpacket), //                 .startofpacket
		.write_cp_endofpacket   (ram_access_0_altera_axi4_master_agent_write_cp_endofpacket),   //                 .endofpacket
		.write_cp_ready         (ram_access_0_altera_axi4_master_agent_write_cp_ready),         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                            //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                             //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                          //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                    //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                      //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                            //                 .ready
		.read_cp_valid          (ram_access_0_altera_axi4_master_agent_read_cp_valid),          //          read_cp.valid
		.read_cp_data           (ram_access_0_altera_axi4_master_agent_read_cp_data),           //                 .data
		.read_cp_startofpacket  (ram_access_0_altera_axi4_master_agent_read_cp_startofpacket),  //                 .startofpacket
		.read_cp_endofpacket    (ram_access_0_altera_axi4_master_agent_read_cp_endofpacket),    //                 .endofpacket
		.read_cp_ready          (ram_access_0_altera_axi4_master_agent_read_cp_ready),          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                        //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                         //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                      //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                  //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                        //                 .ready
		.awid                   (ram_access_0_altera_axi4_master_translator_m0_awid),           // altera_axi_slave.awid
		.awaddr                 (ram_access_0_altera_axi4_master_translator_m0_awaddr),         //                 .awaddr
		.awlen                  (ram_access_0_altera_axi4_master_translator_m0_awlen),          //                 .awlen
		.awsize                 (ram_access_0_altera_axi4_master_translator_m0_awsize),         //                 .awsize
		.awburst                (ram_access_0_altera_axi4_master_translator_m0_awburst),        //                 .awburst
		.awlock                 (ram_access_0_altera_axi4_master_translator_m0_awlock),         //                 .awlock
		.awcache                (ram_access_0_altera_axi4_master_translator_m0_awcache),        //                 .awcache
		.awprot                 (ram_access_0_altera_axi4_master_translator_m0_awprot),         //                 .awprot
		.awuser                 (ram_access_0_altera_axi4_master_translator_m0_awuser),         //                 .awuser
		.awqos                  (ram_access_0_altera_axi4_master_translator_m0_awqos),          //                 .awqos
		.awregion               (ram_access_0_altera_axi4_master_translator_m0_awregion),       //                 .awregion
		.awvalid                (ram_access_0_altera_axi4_master_translator_m0_awvalid),        //                 .awvalid
		.awready                (ram_access_0_altera_axi4_master_translator_m0_awready),        //                 .awready
		.wdata                  (ram_access_0_altera_axi4_master_translator_m0_wdata),          //                 .wdata
		.wstrb                  (ram_access_0_altera_axi4_master_translator_m0_wstrb),          //                 .wstrb
		.wlast                  (ram_access_0_altera_axi4_master_translator_m0_wlast),          //                 .wlast
		.wvalid                 (ram_access_0_altera_axi4_master_translator_m0_wvalid),         //                 .wvalid
		.wuser                  (ram_access_0_altera_axi4_master_translator_m0_wuser),          //                 .wuser
		.wready                 (ram_access_0_altera_axi4_master_translator_m0_wready),         //                 .wready
		.bid                    (ram_access_0_altera_axi4_master_translator_m0_bid),            //                 .bid
		.bresp                  (ram_access_0_altera_axi4_master_translator_m0_bresp),          //                 .bresp
		.buser                  (ram_access_0_altera_axi4_master_translator_m0_buser),          //                 .buser
		.bvalid                 (ram_access_0_altera_axi4_master_translator_m0_bvalid),         //                 .bvalid
		.bready                 (ram_access_0_altera_axi4_master_translator_m0_bready),         //                 .bready
		.arid                   (ram_access_0_altera_axi4_master_translator_m0_arid),           //                 .arid
		.araddr                 (ram_access_0_altera_axi4_master_translator_m0_araddr),         //                 .araddr
		.arlen                  (ram_access_0_altera_axi4_master_translator_m0_arlen),          //                 .arlen
		.arsize                 (ram_access_0_altera_axi4_master_translator_m0_arsize),         //                 .arsize
		.arburst                (ram_access_0_altera_axi4_master_translator_m0_arburst),        //                 .arburst
		.arlock                 (ram_access_0_altera_axi4_master_translator_m0_arlock),         //                 .arlock
		.arcache                (ram_access_0_altera_axi4_master_translator_m0_arcache),        //                 .arcache
		.arprot                 (ram_access_0_altera_axi4_master_translator_m0_arprot),         //                 .arprot
		.aruser                 (ram_access_0_altera_axi4_master_translator_m0_aruser),         //                 .aruser
		.arqos                  (ram_access_0_altera_axi4_master_translator_m0_arqos),          //                 .arqos
		.arregion               (ram_access_0_altera_axi4_master_translator_m0_arregion),       //                 .arregion
		.arvalid                (ram_access_0_altera_axi4_master_translator_m0_arvalid),        //                 .arvalid
		.arready                (ram_access_0_altera_axi4_master_translator_m0_arready),        //                 .arready
		.rid                    (ram_access_0_altera_axi4_master_translator_m0_rid),            //                 .rid
		.rdata                  (ram_access_0_altera_axi4_master_translator_m0_rdata),          //                 .rdata
		.rresp                  (ram_access_0_altera_axi4_master_translator_m0_rresp),          //                 .rresp
		.rlast                  (ram_access_0_altera_axi4_master_translator_m0_rlast),          //                 .rlast
		.rvalid                 (ram_access_0_altera_axi4_master_translator_m0_rvalid),         //                 .rvalid
		.rready                 (ram_access_0_altera_axi4_master_translator_m0_rready),         //                 .rready
		.ruser                  (ram_access_0_altera_axi4_master_translator_m0_ruser),          //                 .ruser
		.wid                    (1'b0)                                                          //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_QOS_H                 (109),
		.PKT_QOS_L                 (106),
		.PKT_DATA_SIDEBAND_H       (104),
		.PKT_DATA_SIDEBAND_L       (104),
		.PKT_ADDR_SIDEBAND_H       (103),
		.PKT_ADDR_SIDEBAND_L       (99),
		.PKT_BURST_TYPE_H          (98),
		.PKT_BURST_TYPE_L          (97),
		.PKT_CACHE_H               (119),
		.PKT_CACHE_L               (116),
		.PKT_THREAD_ID_H           (112),
		.PKT_THREAD_ID_L           (112),
		.PKT_BURST_SIZE_H          (96),
		.PKT_BURST_SIZE_L          (94),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (105),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (93),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (110),
		.PKT_SRC_ID_L              (110),
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (111),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hps_only_master_master_agent (
		.clk                   (clk_0_clk_clk),                                                             //       clk.clk
		.reset                 (ram_access_0_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (hps_only_master_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (hps_only_master_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (hps_only_master_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (hps_only_master_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (hps_only_master_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (hps_only_master_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (hps_only_master_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (hps_only_master_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (hps_only_master_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (hps_only_master_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (hps_only_master_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (hps_only_master_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (hps_only_master_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (hps_only_master_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (hps_only_master_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (hps_only_master_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (hps_only_master_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (hps_only_master_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (hps_only_master_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (hps_only_master_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (hps_only_master_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (hps_only_master_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (145),
		.PKT_QOS_L                   (142),
		.PKT_THREAD_ID_H             (148),
		.PKT_THREAD_ID_L             (148),
		.PKT_RESPONSE_STATUS_H       (157),
		.PKT_RESPONSE_STATUS_L       (156),
		.PKT_BEGIN_BURST             (141),
		.PKT_CACHE_H                 (155),
		.PKT_CACHE_L                 (152),
		.PKT_DATA_SIDEBAND_H         (140),
		.PKT_DATA_SIDEBAND_L         (140),
		.PKT_ADDR_SIDEBAND_H         (139),
		.PKT_ADDR_SIDEBAND_L         (135),
		.PKT_BURST_TYPE_H            (134),
		.PKT_BURST_TYPE_L            (133),
		.PKT_PROTECTION_H            (151),
		.PKT_PROTECTION_L            (149),
		.PKT_BURST_SIZE_H            (132),
		.PKT_BURST_SIZE_L            (130),
		.PKT_BURSTWRAP_H             (129),
		.PKT_BURSTWRAP_L             (122),
		.PKT_BYTE_CNT_H              (121),
		.PKT_BYTE_CNT_L              (110),
		.PKT_ADDR_H                  (103),
		.PKT_ADDR_L                  (72),
		.PKT_TRANS_EXCLUSIVE         (109),
		.PKT_TRANS_LOCK              (108),
		.PKT_TRANS_COMPRESSED_READ   (104),
		.PKT_TRANS_POSTED            (105),
		.PKT_TRANS_WRITE             (106),
		.PKT_TRANS_READ              (107),
		.PKT_DATA_H                  (63),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (71),
		.PKT_BYTEEN_L                (64),
		.PKT_SRC_ID_H                (146),
		.PKT_SRC_ID_L                (146),
		.PKT_DEST_ID_H               (147),
		.PKT_DEST_ID_L               (147),
		.PKT_ORI_BURST_SIZE_L        (158),
		.PKT_ORI_BURST_SIZE_H        (160),
		.ADDR_USER_WIDTH             (5),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (161),
		.ADDR_WIDTH                  (32),
		.RDATA_WIDTH                 (64),
		.WDATA_WIDTH                 (64),
		.ST_CHANNEL_W                (3),
		.AXI_SLAVE_ID_W              (8),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI3"),
		.WRITE_ACCEPTANCE_CAPABILITY (8),
		.READ_ACCEPTANCE_CAPABILITY  (8)
	) hps_0_f2h_axi_slave_agent (
		.aclk                   (clk_0_clk_clk),                                                     //        clock_sink.clk
		.aresetn                (~hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), //        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                             //           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                             //                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                              //                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                           //                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                                     //                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                                       //                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                                 //          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                                 //                  .valid
		.write_cp_data          (cmd_mux_src_data),                                                  //                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                               //                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                         //                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                           //                  .endofpacket
		.read_rp_ready          (hps_0_f2h_axi_slave_agent_read_rp_ready),                           //           read_rp.ready
		.read_rp_valid          (hps_0_f2h_axi_slave_agent_read_rp_valid),                           //                  .valid
		.read_rp_data           (hps_0_f2h_axi_slave_agent_read_rp_data),                            //                  .data
		.read_rp_startofpacket  (hps_0_f2h_axi_slave_agent_read_rp_startofpacket),                   //                  .startofpacket
		.read_rp_endofpacket    (hps_0_f2h_axi_slave_agent_read_rp_endofpacket),                     //                  .endofpacket
		.write_rp_ready         (hps_0_f2h_axi_slave_agent_write_rp_ready),                          //          write_rp.ready
		.write_rp_valid         (hps_0_f2h_axi_slave_agent_write_rp_valid),                          //                  .valid
		.write_rp_data          (hps_0_f2h_axi_slave_agent_write_rp_data),                           //                  .data
		.write_rp_startofpacket (hps_0_f2h_axi_slave_agent_write_rp_startofpacket),                  //                  .startofpacket
		.write_rp_endofpacket   (hps_0_f2h_axi_slave_agent_write_rp_endofpacket),                    //                  .endofpacket
		.awid                   (hps_0_f2h_axi_slave_awid),                                          // altera_axi_master.awid
		.awaddr                 (hps_0_f2h_axi_slave_awaddr),                                        //                  .awaddr
		.awlen                  (hps_0_f2h_axi_slave_awlen),                                         //                  .awlen
		.awsize                 (hps_0_f2h_axi_slave_awsize),                                        //                  .awsize
		.awburst                (hps_0_f2h_axi_slave_awburst),                                       //                  .awburst
		.awlock                 (hps_0_f2h_axi_slave_awlock),                                        //                  .awlock
		.awcache                (hps_0_f2h_axi_slave_awcache),                                       //                  .awcache
		.awprot                 (hps_0_f2h_axi_slave_awprot),                                        //                  .awprot
		.awuser                 (hps_0_f2h_axi_slave_awuser),                                        //                  .awuser
		.awvalid                (hps_0_f2h_axi_slave_awvalid),                                       //                  .awvalid
		.awready                (hps_0_f2h_axi_slave_awready),                                       //                  .awready
		.wid                    (hps_0_f2h_axi_slave_wid),                                           //                  .wid
		.wdata                  (hps_0_f2h_axi_slave_wdata),                                         //                  .wdata
		.wstrb                  (hps_0_f2h_axi_slave_wstrb),                                         //                  .wstrb
		.wlast                  (hps_0_f2h_axi_slave_wlast),                                         //                  .wlast
		.wvalid                 (hps_0_f2h_axi_slave_wvalid),                                        //                  .wvalid
		.wready                 (hps_0_f2h_axi_slave_wready),                                        //                  .wready
		.bid                    (hps_0_f2h_axi_slave_bid),                                           //                  .bid
		.bresp                  (hps_0_f2h_axi_slave_bresp),                                         //                  .bresp
		.bvalid                 (hps_0_f2h_axi_slave_bvalid),                                        //                  .bvalid
		.bready                 (hps_0_f2h_axi_slave_bready),                                        //                  .bready
		.arid                   (hps_0_f2h_axi_slave_arid),                                          //                  .arid
		.araddr                 (hps_0_f2h_axi_slave_araddr),                                        //                  .araddr
		.arlen                  (hps_0_f2h_axi_slave_arlen),                                         //                  .arlen
		.arsize                 (hps_0_f2h_axi_slave_arsize),                                        //                  .arsize
		.arburst                (hps_0_f2h_axi_slave_arburst),                                       //                  .arburst
		.arlock                 (hps_0_f2h_axi_slave_arlock),                                        //                  .arlock
		.arcache                (hps_0_f2h_axi_slave_arcache),                                       //                  .arcache
		.arprot                 (hps_0_f2h_axi_slave_arprot),                                        //                  .arprot
		.aruser                 (hps_0_f2h_axi_slave_aruser),                                        //                  .aruser
		.arvalid                (hps_0_f2h_axi_slave_arvalid),                                       //                  .arvalid
		.arready                (hps_0_f2h_axi_slave_arready),                                       //                  .arready
		.rid                    (hps_0_f2h_axi_slave_rid),                                           //                  .rid
		.rdata                  (hps_0_f2h_axi_slave_rdata),                                         //                  .rdata
		.rresp                  (hps_0_f2h_axi_slave_rresp),                                         //                  .rresp
		.rlast                  (hps_0_f2h_axi_slave_rlast),                                         //                  .rlast
		.rvalid                 (hps_0_f2h_axi_slave_rvalid),                                        //                  .rvalid
		.rready                 (hps_0_f2h_axi_slave_rready)                                         //                  .rready
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (ram_access_0_altera_axi4_master_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (ram_access_0_altera_axi4_master_agent_write_cp_valid),         //          .valid
		.sink_data          (ram_access_0_altera_axi4_master_agent_write_cp_data),          //          .data
		.sink_startofpacket (ram_access_0_altera_axi4_master_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ram_access_0_altera_axi4_master_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                //       clk.clk
		.reset              (ram_access_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_src_ready),                                             //       src.ready
		.src_valid          (router_src_valid),                                             //          .valid
		.src_data           (router_src_data),                                              //          .data
		.src_channel        (router_src_channel),                                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (ram_access_0_altera_axi4_master_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (ram_access_0_altera_axi4_master_agent_read_cp_valid),         //          .valid
		.sink_data          (ram_access_0_altera_axi4_master_agent_read_cp_data),          //          .data
		.sink_startofpacket (ram_access_0_altera_axi4_master_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ram_access_0_altera_axi4_master_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (ram_access_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_001_src_ready),                                        //       src.ready
		.src_valid          (router_001_src_valid),                                        //          .valid
		.src_data           (router_001_src_data),                                         //          .data
		.src_channel        (router_001_src_channel),                                      //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (hps_only_master_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (hps_only_master_master_agent_cp_valid),          //          .valid
		.sink_data          (hps_only_master_master_agent_cp_data),           //          .data
		.sink_startofpacket (hps_only_master_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (hps_only_master_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (ram_access_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                           //       src.ready
		.src_valid          (router_002_src_valid),                           //          .valid
		.src_data           (router_002_src_data),                            //          .data
		.src_channel        (router_002_src_channel),                         //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (hps_0_f2h_axi_slave_agent_write_rp_ready),                         //      sink.ready
		.sink_valid         (hps_0_f2h_axi_slave_agent_write_rp_valid),                         //          .valid
		.sink_data          (hps_0_f2h_axi_slave_agent_write_rp_data),                          //          .data
		.sink_startofpacket (hps_0_f2h_axi_slave_agent_write_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_f2h_axi_slave_agent_write_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                             //       src.ready
		.src_valid          (router_003_src_valid),                                             //          .valid
		.src_data           (router_003_src_data),                                              //          .data
		.src_channel        (router_003_src_channel),                                           //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (hps_0_f2h_axi_slave_agent_read_rp_ready),                          //      sink.ready
		.sink_valid         (hps_0_f2h_axi_slave_agent_read_rp_valid),                          //          .valid
		.sink_data          (hps_0_f2h_axi_slave_agent_read_rp_data),                           //          .data
		.sink_startofpacket (hps_0_f2h_axi_slave_agent_read_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (hps_0_f2h_axi_slave_agent_read_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                             //       src.ready
		.src_valid          (router_004_src_valid),                                             //          .valid
		.src_data           (router_004_src_data),                                              //          .data
		.src_channel        (router_004_src_channel),                                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                        //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (111),
		.PKT_DEST_ID_L             (111),
		.PKT_SRC_ID_H              (110),
		.PKT_SRC_ID_L              (110),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (16),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_only_master_master_limiter (
		.clk                    (clk_0_clk_clk),                                              //       clk.clk
		.reset                  (ram_access_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                       //          .valid
		.cmd_sink_data          (router_002_src_data),                                        //          .data
		.cmd_sink_channel       (router_002_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (hps_only_master_master_limiter_cmd_src_ready),               //   cmd_src.ready
		.cmd_src_data           (hps_only_master_master_limiter_cmd_src_data),                //          .data
		.cmd_src_channel        (hps_only_master_master_limiter_cmd_src_channel),             //          .channel
		.cmd_src_startofpacket  (hps_only_master_master_limiter_cmd_src_startofpacket),       //          .startofpacket
		.cmd_src_endofpacket    (hps_only_master_master_limiter_cmd_src_endofpacket),         //          .endofpacket
		.cmd_src_valid          (hps_only_master_master_limiter_cmd_src_valid),               //          .valid
		.rsp_sink_ready         (hps_only_master_master_rsp_width_adapter_src_ready),         //  rsp_sink.ready
		.rsp_sink_valid         (hps_only_master_master_rsp_width_adapter_src_valid),         //          .valid
		.rsp_sink_channel       (hps_only_master_master_rsp_width_adapter_src_channel),       //          .channel
		.rsp_sink_data          (hps_only_master_master_rsp_width_adapter_src_data),          //          .data
		.rsp_sink_startofpacket (hps_only_master_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.rsp_sink_endofpacket   (hps_only_master_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.rsp_src_ready          (hps_only_master_master_limiter_rsp_src_ready),               //   rsp_src.ready
		.rsp_src_valid          (hps_only_master_master_limiter_rsp_src_valid),               //          .valid
		.rsp_src_data           (hps_only_master_master_limiter_rsp_src_data),                //          .data
		.rsp_src_channel        (hps_only_master_master_limiter_rsp_src_channel),             //          .channel
		.rsp_src_startofpacket  (hps_only_master_master_limiter_rsp_src_startofpacket),       //          .startofpacket
		.rsp_src_endofpacket    (hps_only_master_master_limiter_rsp_src_endofpacket)          //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (ram_access_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                               //      sink.ready
		.sink_channel       (router_src_channel),                             //          .channel
		.sink_data          (router_src_data),                                //          .data
		.sink_startofpacket (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_src_valid),                               //          .valid
		.src0_ready         (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                           //          .valid
		.src0_data          (cmd_demux_src0_data),                            //          .data
		.src0_channel       (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (ram_access_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                           //      sink.ready
		.sink_channel       (router_001_src_channel),                         //          .channel
		.sink_data          (router_001_src_data),                            //          .data
		.sink_startofpacket (router_001_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_001_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_001_src0_data),                        //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (ram_access_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.sink_ready         (hps_only_master_master_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (hps_only_master_master_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (hps_only_master_master_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (hps_only_master_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_only_master_master_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (hps_only_master_master_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                   //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                   //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                    //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                 //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                   //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                   //          .valid
		.src1_data          (cmd_demux_002_src1_data),                                    //          .data
		.src1_channel       (cmd_demux_002_src1_channel),                                 //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                              //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                //          .valid
		.src_data            (cmd_mux_src_data),                                                 //          .data
		.src_channel         (cmd_mux_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                       //          .endofpacket
		.sink1_ready         (cmd_demux_002_src0_ready),                                         //     sink1.ready
		.sink1_valid         (cmd_demux_002_src0_valid),                                         //          .valid
		.sink1_channel       (cmd_demux_002_src0_channel),                                       //          .channel
		.sink1_data          (cmd_demux_002_src0_data),                                          //          .data
		.sink1_startofpacket (cmd_demux_002_src0_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                            //          .valid
		.src_data            (cmd_mux_001_src_data),                                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_001_src0_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_001_src0_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_001_src0_channel),                                       //          .channel
		.sink0_data          (cmd_demux_001_src0_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src0_endofpacket),                                   //          .endofpacket
		.sink1_ready         (cmd_demux_002_src1_ready),                                         //     sink1.ready
		.sink1_valid         (cmd_demux_002_src1_valid),                                         //          .valid
		.sink1_channel       (cmd_demux_002_src1_channel),                                       //          .channel
		.sink1_data          (cmd_demux_002_src1_data),                                          //          .data
		.sink1_startofpacket (cmd_demux_002_src1_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_002 rsp_demux (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                             //      sink.ready
		.sink_channel       (router_003_src_channel),                                           //          .channel
		.sink_data          (router_003_src_data),                                              //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_003_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                             //          .valid
		.src0_data          (rsp_demux_src0_data),                                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                       //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                             //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                             //          .valid
		.src1_data          (rsp_demux_src1_data),                                              //          .data
		.src1_channel       (rsp_demux_src1_channel),                                           //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_002 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_f2h_axi_slave_agent_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                             //      sink.ready
		.sink_channel       (router_004_src_channel),                                           //          .channel
		.sink_data          (router_004_src_data),                                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                                   //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                         //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                         //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                          //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                       //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (ram_access_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                              //       src.ready
		.src_valid           (rsp_mux_src_valid),                              //          .valid
		.src_data            (rsp_mux_src_data),                               //          .data
		.src_channel         (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                         //          .channel
		.sink0_data          (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (ram_access_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_001_src0_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.sink0_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.sink0_data          (rsp_demux_001_src0_data),                        //          .data
		.sink0_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (ram_access_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                          //          .valid
		.src_data            (rsp_mux_002_src_data),                           //          .data
		.src_channel         (rsp_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                         //          .channel
		.sink0_data          (rsp_demux_src1_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                     //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                       //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                     //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                        //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (85),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (93),
		.IN_PKT_BURSTWRAP_L            (86),
		.IN_PKT_BURST_SIZE_H           (96),
		.IN_PKT_BURST_SIZE_L           (94),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (98),
		.IN_PKT_BURST_TYPE_L           (97),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (121),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (132),
		.OUT_PKT_BURST_SIZE_L          (130),
		.OUT_PKT_RESPONSE_STATUS_H     (157),
		.OUT_PKT_RESPONSE_STATUS_L     (156),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (134),
		.OUT_PKT_BURST_TYPE_L          (133),
		.OUT_PKT_ORI_BURST_SIZE_L      (158),
		.OUT_PKT_ORI_BURST_SIZE_H      (160),
		.OUT_ST_DATA_W                 (161),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_only_master_master_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (ram_access_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (hps_only_master_master_limiter_cmd_src_valid),               //      sink.valid
		.in_channel           (hps_only_master_master_limiter_cmd_src_channel),             //          .channel
		.in_startofpacket     (hps_only_master_master_limiter_cmd_src_startofpacket),       //          .startofpacket
		.in_endofpacket       (hps_only_master_master_limiter_cmd_src_endofpacket),         //          .endofpacket
		.in_ready             (hps_only_master_master_limiter_cmd_src_ready),               //          .ready
		.in_data              (hps_only_master_master_limiter_cmd_src_data),                //          .data
		.out_endofpacket      (hps_only_master_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_only_master_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_only_master_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_only_master_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_only_master_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_only_master_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (121),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (129),
		.IN_PKT_BURSTWRAP_L            (122),
		.IN_PKT_BURST_SIZE_H           (132),
		.IN_PKT_BURST_SIZE_L           (130),
		.IN_PKT_RESPONSE_STATUS_H      (157),
		.IN_PKT_RESPONSE_STATUS_L      (156),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (134),
		.IN_PKT_BURST_TYPE_L           (133),
		.IN_PKT_ORI_BURST_SIZE_L       (158),
		.IN_PKT_ORI_BURST_SIZE_H       (160),
		.IN_ST_DATA_W                  (161),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (85),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (96),
		.OUT_PKT_BURST_SIZE_L          (94),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (98),
		.OUT_PKT_BURST_TYPE_L          (97),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_only_master_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                              //       clk.clk
		.reset                (ram_access_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (rsp_mux_002_src_valid),                                      //      sink.valid
		.in_channel           (rsp_mux_002_src_channel),                                    //          .channel
		.in_startofpacket     (rsp_mux_002_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (rsp_mux_002_src_endofpacket),                                //          .endofpacket
		.in_ready             (rsp_mux_002_src_ready),                                      //          .ready
		.in_data              (rsp_mux_002_src_data),                                       //          .data
		.out_endofpacket      (hps_only_master_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_only_master_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (hps_only_master_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_only_master_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_only_master_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_only_master_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

endmodule
